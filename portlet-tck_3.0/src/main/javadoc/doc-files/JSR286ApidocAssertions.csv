PARMS genManual=true tcDetailsClassName=JSR286ApiTestCaseDetails singlePage=true
Class / Section;Keywords;Name;Testable;Description
Filter Tests;;;;
FilterChain;Api Action Filter;invokeActionFilter;TRUE;Invoking doFilter(ActionRequest, ActionResponse): causes next filter to be invoked
FilterChain;Api Action Filter;invokeActionFilter2;TRUE;Invoking doFilter(ActionRequest, ActionResponse): causes portlet action method to be invoked
FilterChain;Api Action Filter;invokeActionException;TRUE;Method doFilter(ActionRequest, ActionResponse): If a PortletException is thrown before invoking the next filter in the chain, processing does not continue down the chain 
FilterChain;Api Action Filter;invokeActionException2;FALSE;Invoking doFilter(ActionRequest, ActionResponse): throws IOException if an I/O error occurs
FilterChain;Api Event Filter;invokeEventFilter;TRUE;Invoking doFilter(EventRequest, EventResponse): causes next filter to be invoked
FilterChain;Api Event Filter;invokeEventFilter2;TRUE;Invoking doFilter(EventRequest, EventResponse): causes portlet Event method to be invoked
FilterChain;Api Event Filter;invokeEventException;TRUE;Method doFilter(EventRequest, EventResponse): If a PortletException is thrown before invoking the next filter in the chain, processing does not continue down the chain 
FilterChain;Api Event Filter;invokeEventException2;FALSE;Invoking doFilter(EventRequest, EventResponse): throws IOException if an I/O error occurs
FilterChain;Api Render Filter;invokeRenderFilter;TRUE;Invoking doFilter(RenderRequest, RenderResponse): causes next filter to be invoked
FilterChain;Api Render Filter;invokeRenderFilter2;TRUE;Invoking doFilter(RenderRequest, RenderResponse): causes portlet Render method to be invoked
FilterChain;Api Render Filter;invokeRenderException;TRUE;Method doFilter(RenderRequest, RenderResponse): If a PortletException is thrown before invoking the next filter in the chain, processing does not continue down the chain 
FilterChain;Api Render Filter;invokeRenderException2;FALSE;Invoking doFilter(RenderRequest, RenderResponse): throws IOException if an I/O error occurs
FilterChain;Api Resource Filter;invokeResourceFilter;TRUE;Invoking doFilter(ResourceRequest, ResourceResponse): causes next filter to be invoked
FilterChain;Api Resource Filter;invokeResourceFilter2;TRUE;Invoking doFilter(ResourceRequest, ResourceResponse): causes portlet Resource method to be invoked
FilterChain;Api Resource Filter;invokeResourceException;TRUE;Method doFilter(ResourceRequest, ResourceResponse): If a PortletException is thrown before invoking the next filter in the chain, processing does not continue down the chain 
FilterChain;Api Resource Filter;invokeResourceException2;FALSE;Invoking doFilter(ResourceRequest, ResourceResponse): throws IOException if an I/O error occurs
FilterConfig;Api Render Filter;getFilterName;TRUE;Method getFilterName(): getFilterName method returns filter name as defined in deployment descriptor
FilterConfig;Api Render Filter;getPortletContext;TRUE;Method getPortletContext(): Returns reference to PortletContext object
FilterConfig;Api Render Filter;getInitParameter1;TRUE;Method getInitParameter(String): Returns null if initialization parameter does not exist
FilterConfig;Api Render Filter;getInitParameter2;TRUE;Method getInitParameter(String): Returns value of specified initialization parameter
FilterConfig;Api Render Filter;getInitParameterNames1;TRUE;Method getInitParameterNames(): Returns empty Enumeration if no parameters defined
FilterConfig;Api Render Filter;getInitParameterNames2;TRUE;Method getInitParameterNames(): Returns an Enumeration of initialization parameters defined in deployment descriptor
PortletFilter;Api Action Filter;initAction1;TRUE;The init(FilterConfig): method is called when an ActionFilter is configured
PortletFilter;Api Action Filter;initAction2;TRUE;The init(FilterConfig): method for an ActionFilter is passed a FilterConfig object
PortletFilter;Api Action Filter;initAction3;TRUE;If the init(FilterConfig): method for an ActionFilter throws a PortletException, the filter is not placed in service
PortletFilter;Api Action Filter;destroyAction1;FALSE;The destroy(): method is called when an ActionFilter is taken out of service
PortletFilter;Api Action Filter;destroyAction2;FALSE;After the destroy(): method for an ActionFilter is called, no other filter method is called
PortletFilter;Api Event Filter;initEvent1;TRUE;The init(FilterConfig): method is called when an EventFilter is configured
PortletFilter;Api Event Filter;initEvent2;TRUE;The init(FilterConfig): method for an EventFilter is passed a FilterConfig object
PortletFilter;Api Event Filter;initEvent3;TRUE;If the init(FilterConfig): method for an EventFilter throws a PortletException, the filter is not placed in service
PortletFilter;Api Event Filter;destroyEvent1;FALSE;The destroy(): method is called when an EventFilter is taken out of service
PortletFilter;Api Event Filter;destroyEvent2;FALSE;After the destroy(): method for an EventFilter is called, no other filter method is called
PortletFilter;Api Render Filter;initRender1;TRUE;The init(FilterConfig): method is called when an RenderFilter is configured
PortletFilter;Api Render Filter;initRender2;TRUE;The init(FilterConfig): method for an RenderFilter is passed a FilterConfig object
PortletFilter;Api Render Filter;initRender3;TRUE;If the init(FilterConfig): method for an RenderFilter throws a PortletException, the filter is not placed in service
PortletFilter;Api Render Filter;destroyRender1;FALSE;The destroy(): method is called when an RenderFilter is taken out of service
PortletFilter;Api Render Filter;destroyRender2;FALSE;After the destroy(): method for an RenderFilter is called, no other filter method is called
PortletFilter;Api Resource Filter;initResource1;TRUE;The init(FilterConfig): method is called when an ResourceFilter is configured
PortletFilter;Api Resource Filter;initResource2;TRUE;The init(FilterConfig): method for an ResourceFilter is passed a FilterConfig object
PortletFilter;Api Resource Filter;initResource3;TRUE;If the init(FilterConfig): method for an ResourceFilter throws a PortletException, the filter is not placed in service
PortletFilter;Api Resource Filter;destroyResource1;FALSE;The destroy(): method is called when an ResourceFilter is taken out of service
PortletFilter;Api Resource Filter;destroyResource2;FALSE;After the destroy(): method for an ResourceFilter is called, no other filter method is called
ActionFilter;Api Action Filter;canBeConfigured1;TRUE;An ActionFilter can be configured in the portlet descriptor
ActionFilter;Api Action Filter;canBeConfigured2;TRUE;Multiple ActionFilter classes can be configured in the portlet descriptor
ActionFilter;Api Action Filter;doFilterIsCalled;TRUE;The doFilter(ActionRequest, ActionResponse, FilterChain): method is called before the processAction method for the portlet
ActionFilter;Api Action Filter;doFilterProcessAction1;TRUE;After the doFilter(ActionRequest, ActionResponse, FilterChain): method has sucessfully completed and invokes the next filter, the processActionMethod is called
ActionFilter;Api Action Filter;doFilterProcessAction2;TRUE;After the doFilter(ActionRequest, ActionResponse, FilterChain): method has sucessfully completed and invokes the next filter, the next filter in the chain is called if multiple filters are defined
ActionFilter;Api Action Filter;doFilterBlock;TRUE;If the doFilter(ActionRequest, ActionResponse, FilterChain): method does not invoke the next filter, processAction is not called
ActionFilter;Api Action Filter;doFilterException1;TRUE;If the doFilter(ActionRequest, ActionResponse, FilterChain): method throws an UnavailableException, processAction is not called
ActionFilter;Api Action Filter;doFilterException2;TRUE;If the doFilter(ActionRequest, ActionResponse, FilterChain): method throws an UnavailableException, no further filter is called
ActionFilter;Api Action Filter;doFilterExamine;TRUE;Method doFilter(ActionRequest, ActionResponse, FilterChain): After the next filter has been successfully invoked, the ActionResponse may be examined
EventFilter;Api Event Filter;canBeConfigured1;TRUE;An EventFilter can be configured in the portlet descriptor
EventFilter;Api Event Filter;canBeConfigured2;TRUE;Multiple EventFilter classes can be configured in the portlet descriptor
EventFilter;Api Event Filter;doFilterIsCalled;TRUE;The doFilter(EventRequest, EventResponse, FilterChain): method is called before the processEvent method for the portlet
EventFilter;Api Event Filter;doFilterProcessEvent1;TRUE;After the doFilter(EventRequest, EventResponse, FilterChain): method has sucessfully completed and invokes the next filter, the processEventMethod is called
EventFilter;Api Event Filter;doFilterProcessEvent2;TRUE;After the doFilter(EventRequest, EventResponse, FilterChain): method has sucessfully completed and invokes the next filter, the next filter in the chain is called if multiple filters are defined
EventFilter;Api Event Filter;doFilterBlock;TRUE;If the doFilter(EventRequest, EventResponse, FilterChain): method does not invoke the next filter, processEvent is not called
EventFilter;Api Event Filter;doFilterException1;TRUE;If the doFilter(EventRequest, EventResponse, FilterChain): method throws an UnavailableException, processEvent is not called
EventFilter;Api Event Filter;doFilterException2;TRUE;If the doFilter(EventRequest, EventResponse, FilterChain): method throws an UnavailableException, no further filter is called
EventFilter;Api Event Filter;doFilterExamine;TRUE;Method doFilter(EventRequest, EventResponse, FilterChain): After the next filter has been successfully invoked, the EventResponse may be examined
RenderFilter;Api Render Filter;canBeConfigured1;TRUE;An RenderFilter can be configured in the portlet descriptor
RenderFilter;Api Render Filter;canBeConfigured2;TRUE;Multiple RenderFilter classes can be configured in the portlet descriptor
RenderFilter;Api Render Filter;doFilterIsCalled;TRUE;The doFilter(RenderRequest, RenderResponse, FilterChain): method is called before the processRender method for the portlet
RenderFilter;Api Render Filter;doFilterProcessRender1;TRUE;After the doFilter(RenderRequest, RenderResponse, FilterChain): method has sucessfully completed and invokes the next filter, the processRenderMethod is called
RenderFilter;Api Render Filter;doFilterProcessRender2;TRUE;After the doFilter(RenderRequest, RenderResponse, FilterChain): method has sucessfully completed and invokes the next filter, the next filter in the chain is called if multiple filters are defined
RenderFilter;Api Render Filter;doFilterBlock;TRUE;If the doFilter(RenderRequest, RenderResponse, FilterChain): method does not invoke the next filter, processRender is not called
RenderFilter;Api Render Filter;doFilterException1;TRUE;If the doFilter(RenderRequest, RenderResponse, FilterChain): method throws an UnavailableException, processRender is not called
RenderFilter;Api Render Filter;doFilterException2;TRUE;If the doFilter(RenderRequest, RenderResponse, FilterChain): method throws an UnavailableException, no further filter is called
RenderFilter;Api Render Filter;doFilterExamine;TRUE;Method doFilter(RenderRequest, RenderResponse, FilterChain): After the next filter has been successfully invoked, the RenderResponse may be examined
ResourceFilter;Api Resource Filter;canBeConfigured1;TRUE;An ResourceFilter can be configured in the portlet descriptor
ResourceFilter;Api Resource Filter;canBeConfigured2;TRUE;Multiple ResourceFilter classes can be configured in the portlet descriptor
ResourceFilter;Api Resource Filter;doFilterIsCalled;TRUE;The doFilter(ResourceRequest, ResourceResponse, FilterChain): method is called before the processResource method for the portlet
ResourceFilter;Api Resource Filter;doFilterProcessResource1;TRUE;After the doFilter(ResourceRequest, ResourceResponse, FilterChain): method has sucessfully completed and invokes the next filter, the processResourceMethod is called
ResourceFilter;Api Resource Filter;doFilterProcessResource2;TRUE;After the doFilter(ResourceRequest, ResourceResponse, FilterChain): method has sucessfully completed and invokes the next filter, the next filter in the chain is called if multiple filters are defined
ResourceFilter;Api Resource Filter;doFilterBlock;TRUE;If the doFilter(ResourceRequest, ResourceResponse, FilterChain): method does not invoke the next filter, processResource is not called
ResourceFilter;Api Resource Filter;doFilterException1;TRUE;If the doFilter(ResourceRequest, ResourceResponse, FilterChain): method throws an UnavailableException, processResource is not called
ResourceFilter;Api Resource Filter;doFilterException2;TRUE;If the doFilter(ResourceRequest, ResourceResponse, FilterChain): method throws an UnavailableException, no further filter is called
ResourceFilter;Api Resource Filter;doFilterExamine;TRUE;Method doFilter(ResourceRequest, ResourceResponse, FilterChain): After the next filter has been successfully invoked, the ResourceResponse may be examined
Wrapper Tests;;;;
ActionRequestWrapper;Api Action;getCharacterEncoding;TRUE;Method getCharacterEncoding(): Calls wrapped method
ActionRequestWrapper;Api Action;getContentLength;TRUE;Method getContentLength(): Calls wrapped method
ActionRequestWrapper;Api Action;getContentType;TRUE;Method getContentType(): Calls wrapped method
ActionRequestWrapper;Api Action;getPortletInputStream;TRUE;Method getPortletInputStream(): Calls wrapped method
ActionRequestWrapper;Api Action;getReader;TRUE;Method getReader(): Calls wrapped method
ActionRequestWrapper;Api Action;setCharacterEncoding;TRUE;Method setCharacterEncoding(String): Calls wrapped method
ActionRequestWrapper;Api Action;getRequest;TRUE;Method getRequest(): Returns wrapped ActionRequest object
ActionRequestWrapper;Api Action;setRequest;TRUE;Method setRequest(ActionRequest): Allows wrapped ActionRequest object to be set
ActionRequestWrapper;Api Action;getMethod;TRUE;Method getMethod(): Calls wrapped method
ActionResponseWrapper;Api Action;sendRedirectA;TRUE;Method sendRedirect(String): Calls wrapped method
ActionResponseWrapper;Api Action;sendRedirectB;TRUE;Method sendRedirect(String, String): Calls wrapped method
ActionResponseWrapper;Api Action;setEventA;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Calls wrapped method
ActionResponseWrapper;Api Action;setEventB;TRUE;Method setEvent(String, java.io.Serializable): Calls wrapped method
ActionResponseWrapper;Api Action;setPortletMode;TRUE;Method setPortletMode(PortletMode): Calls wrapped method
ActionResponseWrapper;Api Action;setRenderParameterA;TRUE;Method setRenderParameter(String, String): Calls wrapped method
ActionResponseWrapper;Api Action;setRenderParameterB;TRUE;Method setRenderParameter(String, String[]): Calls wrapped method
ActionResponseWrapper;Api Action;setRenderParameters;TRUE;Method setRenderParameters(java.util.Map): Calls wrapped method
ActionResponseWrapper;Api Action;setWindowState;TRUE;Method setWindowState(WindowState): Calls wrapped method
ActionResponseWrapper;Api Action;getResponse;TRUE;Method getResponse(): Returns wrapped ActionResponse object
ActionResponseWrapper;Api Action;setResponse;TRUE;Method setResponse(ActionResponse): Allows wrapped ActionResponse object to be set
ActionResponseWrapper;Api Action;getPortletMode;TRUE;Method getPortletMode(): Calls wrapped method
ActionResponseWrapper;Api Action;getRenderParameterMap1;TRUE;Method getRenderParameterMap(): Calls wrapped method
ActionResponseWrapper;Api Action;getWindowState;TRUE;Method getWindowState(): Calls wrapped method
ActionResponseWrapper;Api Action;removePublicRenderParameter;TRUE;Method removePublicRenderParameter(String): Calls wrapped method
EventRequestWrapper;Api Event;getRequest;TRUE;Method getRequest(): Returns wrapped EventRequest object
EventRequestWrapper;Api Event;setRequest;TRUE;Method setRequest(EventRequest): Allows wrapped EventRequest object to be set
EventRequestWrapper;Api Event;getEvent1;TRUE;Method getEvent(): Calls wrapped method
EventRequestWrapper;Api Event;getMethod;TRUE;Method getMethod(): Calls wrapped method
EventResponseWrapper;Api Event;setEventA;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Calls wrapped method
EventResponseWrapper;Api Event;setEventB;TRUE;Method setEvent(String, java.io.Serializable): Calls wrapped method
EventResponseWrapper;Api Event;setPortletMode;TRUE;Method setPortletMode(PortletMode): Calls wrapped method
EventResponseWrapper;Api Event;setRenderParameterA;TRUE;Method setRenderParameter(String, String): Calls wrapped method
EventResponseWrapper;Api Event;setRenderParameterB;TRUE;Method setRenderParameter(String, String[]): Calls wrapped method
EventResponseWrapper;Api Event;setRenderParametersA;TRUE;Method setRenderParameters(EventRequest): Calls wrapped method
EventResponseWrapper;Api Event;setRenderParametersB;TRUE;Method setRenderParameters(EventRequest): Calls wrapped method
EventResponseWrapper;Api Event;setWindowState;TRUE;Method setWindowState(WindowState): Calls wrapped method
EventResponseWrapper;Api Event;getResponse;TRUE;Method getResponse(): Returns wrapped EventResponse object
EventResponseWrapper;Api Event;setResponse;TRUE;Method setResponse(EventResponse): Allows wrapped EventResponse object to be set
EventResponseWrapper;Api Event;getPortletMode;TRUE;Method getPortletMode(): Calls wrapped method
EventResponseWrapper;Api Event;getRenderParameterMap1;TRUE;Method getRenderParameterMap(): Calls wrapped method
EventResponseWrapper;Api Event;getWindowState;TRUE;Method getWindowState(): Calls wrapped method
EventResponseWrapper;Api Event;removePublicRenderParameter;TRUE;Method removePublicRenderParameter(String): Calls wrapped method
PortletRequestWrapper;Api Render;getAttribute;TRUE;Method getAttribute(String): Calls wrapped method
PortletRequestWrapper;Api Render;getAttributeNames;TRUE;Method getAttributeNames(): Calls wrapped method
PortletRequestWrapper;Api Render;getAuthType;TRUE;Method getAuthType(): Calls wrapped method
PortletRequestWrapper;Api Render;getContextPath;TRUE;Method getContextPath(): Calls wrapped method
PortletRequestWrapper;Api Render;getCookies;TRUE;Method getCookies(): Calls wrapped method
PortletRequestWrapper;Api Render;getLocale;TRUE;Method getLocale(): Calls wrapped method
PortletRequestWrapper;Api Render;getLocales;TRUE;Method getLocales(): Calls wrapped method
PortletRequestWrapper;Api Render;getParameter;TRUE;Method getParameter(String): Calls wrapped method
PortletRequestWrapper;Api Render;getParameterMap;TRUE;Method getParameterMap(): Calls wrapped method
PortletRequestWrapper;Api Render;getParameterNames;TRUE;Method getParameterNames(): Calls wrapped method
PortletRequestWrapper;Api Render;getParameterValues;TRUE;Method getParameterValues(String): Calls wrapped method
PortletRequestWrapper;Api Render;getPortalContext;TRUE;Method getPortalContext(): Calls wrapped method
PortletRequestWrapper;Api Render;getPortletMode;TRUE;Method getPortletMode(): Calls wrapped method
PortletRequestWrapper;Api Render;getPortletSessionA;TRUE;Method getPortletSession(): Calls wrapped method
PortletRequestWrapper;Api Render;getPortletSessionB;TRUE;Method getPortletSession(boolean): Calls wrapped method
PortletRequestWrapper;Api Render;getPreferences;TRUE;Method getPreferences(): Calls wrapped method
PortletRequestWrapper;Api Render;getProperties;TRUE;Method getProperties(String): Calls wrapped method
PortletRequestWrapper;Api Render;getProperty;TRUE;Method getProperty(String): Calls wrapped method
PortletRequestWrapper;Api Render;getPropertyNames;TRUE;Method getPropertyNames(): Calls wrapped method
PortletRequestWrapper;Api Render;getRemoteUser;TRUE;Method getRemoteUser(): Calls wrapped method
PortletRequestWrapper;Api Render;getRequestedSessionId;TRUE;Method getRequestedSessionId(): Calls wrapped method
PortletRequestWrapper;Api Render;getResponseContentType;TRUE;Method getResponseContentType(): Calls wrapped method
PortletRequestWrapper;Api Render;getResponseContentTypes;TRUE;Method getResponseContentTypes(): Calls wrapped method
PortletRequestWrapper;Api Render;getScheme;TRUE;Method getScheme(): Calls wrapped method
PortletRequestWrapper;Api Render;getServerName;TRUE;Method getServerName(): Calls wrapped method
PortletRequestWrapper;Api Render;getServerPort;TRUE;Method getServerPort(): Calls wrapped method
PortletRequestWrapper;Api Render;getUserPrincipal;TRUE;Method getUserPrincipal(): Calls wrapped method
PortletRequestWrapper;Api Render;getWindowID;TRUE;Method getWindowID(): Calls wrapped method
PortletRequestWrapper;Api Render;getWindowState;TRUE;Method getWindowState(): Calls wrapped method
PortletRequestWrapper;Api Render;isPortletModeAllowed;TRUE;Method isPortletModeAllowed(PortletMode): Calls wrapped method
PortletRequestWrapper;Api Render;isRequestedSessionIdValid;TRUE;Method isRequestedSessionIdValid(): Calls wrapped method
PortletRequestWrapper;Api Render;isSecure;TRUE;Method isSecure(): Calls wrapped method
PortletRequestWrapper;Api Render;isUserInRole;TRUE;Method isUserInRole(String): Calls wrapped method
PortletRequestWrapper;Api Render;isWindowStateAllowed;TRUE;Method isWindowStateAllowed(WindowState): Calls wrapped method
PortletRequestWrapper;Api Render;removeAttribute;TRUE;Method removeAttribute(String): Calls wrapped method
PortletRequestWrapper;Api Render;setAttribute;TRUE;Method setAttribute(String, Object): Calls wrapped method
PortletRequestWrapper;Api Render;getRequest;TRUE;Method getRequest(): Returns wrapped PortletRequest object
PortletRequestWrapper;Api Render;setRequest;TRUE;Method setRequest(PortletRequest): Allows wrapped PortletRequest object to be set
PortletRequestWrapper;Api Render;getPrivateParameterMap;TRUE;Method getPrivateParameterMap(): Calls wrapped method
PortletRequestWrapper;Api Render;getPublicParameterMap;TRUE;Method getPublicParameterMap(): Calls wrapped method
PortletResponseWrapper;Api Render;addPropertyA;TRUE;Method addProperty(javax.servlet.http.Cookie): Calls wrapped method
PortletResponseWrapper;Api Render;addPropertyB;TRUE;Method addProperty(String, org.w3c.dom.Element): Calls wrapped method
PortletResponseWrapper;Api Render;addPropertyC;TRUE;Method addProperty(String, String): Calls wrapped method
PortletResponseWrapper;Api Render;encodeURL;TRUE;Method encodeURL(String): Calls wrapped method
PortletResponseWrapper;Api Render;getNamespace;TRUE;Method getNamespace(): Calls wrapped method
PortletResponseWrapper;Api Render;setProperty;TRUE;Method setProperty(String, String): Calls wrapped method
PortletResponseWrapper;Api Render;getResponse;TRUE;Method getResponse(): Returns wrapped PortletResponse object
PortletResponseWrapper;Api Render;setResponse;TRUE;Method setResponse(PortletResponse): Allows wrapped PortletResponse object to be set
PortletResponseWrapper;Api Render;createElement;TRUE;Method createElement(String): Calls wrapped method
RenderRequestWrapper;Api Render;getRequest;TRUE;Method getRequest(): Returns wrapped RenderRequest object
RenderRequestWrapper;Api Render;setRequest;TRUE;Method setRequest(RenderRequest): Allows wrapped RenderRequest object to be set 
RenderRequestWrapper;Api Render;getETag;TRUE;Method getETag(): Calls wrapped method
RenderResponseWrapper;Api Render;flushBuffer;TRUE;Method flushBuffer(): Calls wrapped method
RenderResponseWrapper;Api Render;getBufferSize;TRUE;Method getBufferSize(): Calls wrapped method
RenderResponseWrapper;Api Render;getCharacterEncoding;TRUE;Method getCharacterEncoding(): Calls wrapped method
RenderResponseWrapper;Api Render;getContentType;TRUE;Method getContentType(): Calls wrapped method
RenderResponseWrapper;Api Render;getLocale;TRUE;Method getLocale(): Calls wrapped method
RenderResponseWrapper;Api Render;getPortletOutputStream;TRUE;Method getPortletOutputStream(): Calls wrapped method
RenderResponseWrapper;Api Render;getWriter;TRUE;Method getWriter(): Calls wrapped method
RenderResponseWrapper;Api Render;isCommitted;TRUE;Method isCommitted(): Calls wrapped method
RenderResponseWrapper;Api Render;reset;TRUE;Method reset(): Calls wrapped method
RenderResponseWrapper;Api Render;resetBuffer;TRUE;Method resetBuffer(): Calls wrapped method
RenderResponseWrapper;Api Render;setBufferSize;TRUE;Method setBufferSize(int): Calls wrapped method
RenderResponseWrapper;Api Render;setContentType;TRUE;Method setContentType(String): Calls wrapped method
RenderResponseWrapper;Api Render;setTitle;TRUE;Method setTitle(String): Calls wrapped method
RenderResponseWrapper;Api Render;getCacheControl;TRUE;Method getCacheControl(): Calls wrapped method
RenderResponseWrapper;Api Render;setNextPossiblePortletModes;TRUE;Method setNextPossiblePortletModes(java.util.Collection): Calls wrapped method
RenderResponseWrapper;Api Render;getResponse;TRUE;Method getResponse(): Returns wrapped RenderResponse object
RenderResponseWrapper;Api Render;setResponse;TRUE;Method setResponse(RenderResponse): Allows wrapped RenderResponse object to be set 
RenderResponseWrapper;Api Render;createActionURL;TRUE;Method createActionURL(): Calls wrapped method
RenderResponseWrapper;Api Render;createRenderURL;TRUE;Method createRenderURL(): Calls wrapped method
RenderResponseWrapper;Api Render;createResourceURL;TRUE;Method createResourceURL(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getPortletInputStream;TRUE;Method getPortletInputStream(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getReader;TRUE;Method getReader(): Calls wrapped method
ResourceRequestWrapper;Api Resource;setCharacterEncoding;TRUE;Method setCharacterEncoding(String): Calls wrapped method
ResourceRequestWrapper;Api Resource;getRequest;TRUE;Method getRequest(): Returns wrapped ResourceRequest object
ResourceRequestWrapper;Api Resource;setRequest;TRUE;Method setRequest(ResourceRequest): Allows wrapped ResourceRequest object to be set
ResourceRequestWrapper;Api Resource;getCharacterEncoding;TRUE;Method getCharacterEncoding(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getContentLength;TRUE;Method getContentLength(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getContentType;TRUE;Method getContentType(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getETag;TRUE;Method getETag(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getMethod;TRUE;Method getMethod(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getResourceID;TRUE;Method getResourceID(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getPrivateRenderParameterMap;TRUE;Method getPrivateRenderParameterMap(): Calls wrapped method
ResourceRequestWrapper;Api Resource;getCacheability;TRUE;Method getCacheability(): Calls wrapped method
ResourceResponseWrapper;Api Resource;flushBuffer;TRUE;Method flushBuffer(): Calls wrapped method
ResourceResponseWrapper;Api Resource;getBufferSize;TRUE;Method getBufferSize(): Calls wrapped method
ResourceResponseWrapper;Api Resource;getCharacterEncoding;TRUE;Method getCharacterEncoding(): Calls wrapped method
ResourceResponseWrapper;Api Resource;getContentType;TRUE;Method getContentType(): Calls wrapped method
ResourceResponseWrapper;Api Resource;getLocale;TRUE;Method getLocale(): Calls wrapped method
ResourceResponseWrapper;Api Resource;getPortletOutputStream;TRUE;Method getPortletOutputStream(): Calls wrapped method
ResourceResponseWrapper;Api Resource;getWriter;TRUE;Method getWriter(): Calls wrapped method
ResourceResponseWrapper;Api Resource;isCommitted;TRUE;Method isCommitted(): Calls wrapped method
ResourceResponseWrapper;Api Resource;reset;TRUE;Method reset(): Calls wrapped method
ResourceResponseWrapper;Api Resource;resetBuffer;TRUE;Method resetBuffer(): Calls wrapped method
ResourceResponseWrapper;Api Resource;setBufferSize;TRUE;Method setBufferSize(int): Calls wrapped method
ResourceResponseWrapper;Api Resource;setContentType;TRUE;Method setContentType(String): Calls wrapped method
ResourceResponseWrapper;Api Resource;getCacheControl;TRUE;Method getCacheControl(): Calls wrapped method
ResourceResponseWrapper;Api Resource;setCharacterEncoding;TRUE;Method setCharacterEncoding(String): Calls wrapped method
ResourceResponseWrapper;Api Resource;setLocale;TRUE;Method setLocale(Locale): Calls wrapped method
ResourceResponseWrapper;Api Resource;setContentLength;TRUE;Method setContentLength(int): Calls wrapped method
ResourceResponseWrapper;Api Resource;getResponse;TRUE;Method getResponse(): Returns wrapped RespurceResponse object
ResourceResponseWrapper;Api Resource;setResponse;TRUE;Method setResponse(ResourceResponse): Allows wrapped ResourceResponse object to be set
ResourceResponseWrapper;Api Resource;createActionURL;TRUE;Method createActionURL(): Calls wrapped method
ResourceResponseWrapper;Api Resource;createRenderURL;TRUE;Method createRenderURL(): Calls wrapped method
ResourceResponseWrapper;Api Resource;createResourceURL;TRUE;Method createResourceURL(): Calls wrapped method
Request Tests;;;;
PortletRequest;Api Render;fieldUSER_INFO;TRUE;Has String field USER_INFO with value of "javax.portlet.userinfo" 
PortletRequest;Api Render;fieldCCPP_PROFILE;TRUE;Has String field CCPP_PROFILE with value of "javax.portlet.ccpp" 
PortletRequest;Api Render;fieldBASIC_AUTH;TRUE;Has String field BASIC_AUTH with value of "BASIC" 
PortletRequest;Api Render;fieldFORM_AUTH;TRUE;Has String field FORM_AUTH with value of "FORM" 
PortletRequest;Api Render;fieldCLIENT_CERT_AUTH;TRUE;Has String field CLIENT_CERT_AUTH with value of "CLIENT_CERT" 
PortletRequest;Api Render;fieldDIGEST_AUTH;TRUE;Has String field DIGEST_AUTH with value of "DIGEST" 
PortletRequest;Api Render;fieldACTION_PHASE;TRUE;Has String field ACTION_PHASE with value of "ACTION_PHASE" 
PortletRequest;Api Render;fieldEVENT_PHASE;TRUE;Has String field EVENT_PHASE with value of "EVENT_PHASE" 
PortletRequest;Api Render;fieldRENDER_PHASE;TRUE;Has String field RENDER_PHASE with value of "RENDER_PHASE" 
PortletRequest;Api Render;fieldRESOURCE_PHASE;TRUE;Has String field RESOURCE_PHASE with value of "RESOURCE_PHASE" 
PortletRequest;Api Render;fieldLIFECYCLE_PHASE;TRUE;Has String field LIFECYCLE_PHASE with value of "javax.portlet.lifecycle_phase" 
PortletRequest;Api Render;fieldRENDER_PART;TRUE;Has String field RENDER_PART with value of "javax.portlet.render_part" 
PortletRequest;Api Render;fieldRENDER_HEADERS;TRUE;Has String field RENDER_HEADERS with value of "RENDER_HEADERS" 
PortletRequest;Api Render;fieldRENDER_MARKUP;TRUE;Has String field RENDER_MARKUP with value of "RENDER_MARKUP" 
PortletRequest;Api Render;fieldACTION_SCOPE_ID;TRUE;Has String field ACTION_SCOPE_ID with value of "javax.portlet.as" 
PortletRequest;Api Render;isWindowStateAllowed1;TRUE;Method isWindowStateAllowed(WindowState): Returns true if the specified WindowState is allowed
PortletRequest;Api Render;isWindowStateAllowed2;TRUE;Method isWindowStateAllowed(WindowState): Returns false if the specified WindowState is not allowed
PortletRequest;Api Render;isPortletModeAllowed1;TRUE;Method isPortletModeAllowed(PortletMode): Returns true if the specified PortletMode is allowed
PortletRequest;Api Render;isPortletModeAllowed2;TRUE;Method isPortletModeAllowed(PortletMode): Returns false if the specified PortletMode is not allowed
PortletRequest;Api Render;getPortletMode;TRUE;Method getPortletMode(): Returns current PortletMode 
PortletRequest;Api Render;getWindowState;TRUE;Method getWindowState(): Returns current WindowState
PortletRequest;Api Render;getPreferences;TRUE;Method getPreferences(): Returns the PortletPreferences object associated with the portlet
PortletRequest;Api Render;getPortletSessionA1;TRUE;Method getPortletSession(): Returns current PortletSession if one already exists
PortletRequest;Api Render;getPortletSessionA2;TRUE;Method getPortletSession(): Returns new PortletSession if one does not already exist
PortletRequest;Api Render;getPortletSessionB1;TRUE;Method getPortletSession(boolean): If input flag is true, returns current PortletSession if one already exists
PortletRequest;Api Render;getPortletSessionB2;TRUE;Method getPortletSession(boolean): If input flag is true, returns new PortletSession if one does not already exist
PortletRequest;Api Render;getPortletSessionB3;TRUE;Method getPortletSession(boolean): If input flag is false, returns current PortletSession if one already exists
PortletRequest;Api Render;getPortletSessionB4;TRUE;Method getPortletSession(boolean): If input flag is false, returns null if one does not already exist
PortletRequest;Api Render;getProperty1;TRUE;Method getProperty(String): If specified request property exists, returns its value 
PortletRequest;Api Render;getProperty2;TRUE;Method getProperty(String): If specified request property does not exist, returns null
PortletRequest;Api Render;getProperty3;TRUE;Method getProperty(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;getProperties1;TRUE;Method getProperties(String): If specified request property exists, returns its values as an Enumeration 
PortletRequest;Api Render;getProperties2;TRUE;Method getProperties(String): If specified request property does not exist, returns an empty Enumeration
PortletRequest;Api Render;getProperties3;TRUE;Method getProperties(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;getPropertyNames1;TRUE;Method getPropertyNames(): Returns an Enumeration of all request property names
PortletRequest;Api Render;getPropertyNames2;TRUE;Method getPropertyNames(): Returns an empty Enumeration if there are no request properties defined
PortletRequest;Api Render;getPortalContext;TRUE;Method getPortalContext(): Returns the context of the portal
PortletRequest;Api Render;getAuthType1;TRUE;Method getAuthType(): Returns a String indicating the authentication type if the request was authenticated
PortletRequest;Api Render;getAuthType2;TRUE;Method getAuthType(): Returns null if the request was not authenticated
PortletRequest;Api Render;getContextPath1;TRUE;Method getContextPath(): Returns a String representing the context path associated with the portlet
PortletRequest;Api Render;getContextPath2;TRUE;Method getContextPath(): Returns an empty String if the portlet is deployed in the default context
PortletRequest;Api Render;getContextPath3;TRUE;Method getContextPath(): If the context path is not empty, it must start with "/" and may not end with "/"
PortletRequest;Api Render;getRemoteUser1;TRUE;Method getRemoteUser(): Returns a String representing the login of the user if the request is authenticated
PortletRequest;Api Render;getRemoteUser2;TRUE;Method getRemoteUser(): Returns null if the request has not been authenticated
PortletRequest;Api Render;getUserPrincipal1;TRUE;Method getUserPrincipal(): Returns a java.security.Principal object representing the user if the request has been authenticated
PortletRequest;Api Render;getUserPrincipal2;TRUE;Method getUserPrincipal(): Returns null if the request has not been authenticated
PortletRequest;Api Render;isUserInRole1;TRUE;Method isUserInRole(): Returns true if the authenticated user is in the specified role
PortletRequest;Api Render;isUserInRole2;TRUE;Method isUserInRole(): Returns false if the authenticated user is not in the specified role
PortletRequest;Api Render;isUserInRole3;TRUE;Method isUserInRole(): Returns false if the user is not authenticated
PortletRequest;Api Render;getAttribute1;TRUE;Method getAttribute(String): Returns a java.lang.Object for the specified attribute name
PortletRequest;Api Render;getAttribute2;TRUE;Method getAttribute(String): Returns null if no attribute with the specified name exists
PortletRequest;Api Render;getAttribute3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;getAttributeNames1;TRUE;Method getAttributeNames(): Returns a java.util.Enumeration<java.lang.String> of the available attribute names
PortletRequest;Api Render;getAttributeNames2;TRUE;Method getAttributeNames(): Returns an empty Enumeration if there are no attributes available
PortletRequest;Api Render;getParameter1;TRUE;Method getParameter(String): Returns String value of parameter specified by the name
PortletRequest;Api Render;getParameter2;TRUE;Method getParameter(String): Returns String value of a public render parameter specified by the name
PortletRequest;Api Render;getParameter3;TRUE;Method getParameter(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Render;getParameter4;TRUE;Method getParameter(String): Returns first String value from values array if use with a multivalued parameter
PortletRequest;Api Render;getParameter5;TRUE;Method getParameter(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;getParameterNames1;TRUE;Method getParameterNames(): Returns a java.util.Enumeration<java.lang.String> of the available parameter names
PortletRequest;Api Render;getParameterNames2;TRUE;Method getParameterNames(): Returns an empty Enumeration if there are no parameters available
PortletRequest;Api Render;getParameterValues1;TRUE;Method getParameterValues(String): Returns String[] value of parameter specified by the name
PortletRequest;Api Render;getParameterValues2;TRUE;Method getParameterValues(String): Returns String[] value of a public render parameter specified by the name
PortletRequest;Api Render;getParameterValues3;TRUE;Method getParameterValues(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Render;getParameterValues4;TRUE;Method getParameterValues(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
PortletRequest;Api Render;getParameterMap2;TRUE;Method getParameterMap(): The returned map contains all public and private parameters for the request
PortletRequest;Api Render;getParameterMap3;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
PortletRequest;Api Render;isSecure1;TRUE;Method isSecure(): Returns true if the request was made through a secure channel
PortletRequest;Api Render;isSecure2;TRUE;Method isSecure(): Returns false if the request was not made through a secure channel
PortletRequest;Api Render;setAttribute1;TRUE;Method setAttribute(String, Object): Stores an attribute object under the specified name in the request
PortletRequest;Api Render;setAttribute2;TRUE;Method setAttribute(String, Object): Removes the attribute by the specified name if the object is null
PortletRequest;Api Render;setAttribute3;TRUE;Method setAttribute(String, Object): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;removeAttribute1;TRUE;Method removeAttribute(String): Removes the attribute specified by the name from the request
PortletRequest;Api Render;removeAttribute2;TRUE;Method removeAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Render;getRequestedSessionId1;TRUE;Method getRequestedSessionId(): Returns the session ID indicated in the client request
PortletRequest;Api Render;getRequestedSessionId2;TRUE;Method getRequestedSessionId(): Returns null if no session ID was indicated in the client request
PortletRequest;Api Render;isRequestedSessionIdValid1;TRUE;Method isRequestedSessionIdValid(): Returns true if the session ID is valid
PortletRequest;Api Render;isRequestedSessionIdValid2;TRUE;Method isRequestedSessionIdValid(): Returns false if the session ID is not valid
PortletRequest;Api Render;getResponseContentType1;TRUE;Method getResponseContentType(): Returns a String representing the portal preferred content type for the response if the content type is defined in the portlet descriptor  
PortletRequest;Api Render;getResponseContentType2;TRUE;Method getResponseContentType(): Returns an empty Enumeration if the content type is not defined in the portlet descriptor
PortletRequest;Api Render;getResponseContentTypes1;TRUE;Method getResponseContentTypes(): Returns an java.util.Enumeration<java.lang.String> object representing the portal preferred content types for the response if the content types are defined in the portlet descriptor
PortletRequest;Api Render;getResponseContentTypes2;TRUE;Method getResponseContentTypes(): Returns an empty Enumeration if the content types are not defined in the portlet descriptor
PortletRequest;Api Render;getLocale;TRUE;Method getLocale(): Returns an java.util.Locale object representing the preferred Locale for the response
PortletRequest;Api Render;getLocales;TRUE;Method getLocales(): Returns an java.util.Enumeration<java.util.Locale> of the Locales in which the portal will accept content
PortletRequest;Api Render;getScheme;TRUE;Method getScheme(): Returns a String value representing the scheme name for the request
PortletRequest;Api Render;getServerName;TRUE;Method getServerName(): Returns a String value representing the host name for the request
PortletRequest;Api Render;getServerPort;TRUE;Method getServerPort(): Returns an int value representing the port number for the request
PortletRequest;Api Render;getWindowID;TRUE;Method getWindowID(): Returns a String value representing the portlet window ID
PortletRequest;Api Render;getCookies1;TRUE;Method getCookies(): Returns a javax.servlet.http.Cookie[] array containing the cookies for this request
PortletRequest;Api Render;getCookies2;TRUE;Method getCookies(): Returns null if no cookies are present
PortletRequest;Api Render;getPrivateParameterMap1;TRUE;Method getPrivateParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the private parameter names and values if available
PortletRequest;Api Render;getPrivateParameterMap2;TRUE;Method getPrivateParameterMap(): The returned map is immutable
PortletRequest;Api Render;getPrivateParameterMap3;TRUE;Method getPrivateParameterMap(): Returns an empty map if no private parameters exist
PortletRequest;Api Render;getPublicParameterMap1;TRUE;Method getPublicParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the public parameter names and values if available
PortletRequest;Api Render;getPublicParameterMap2;TRUE;Method getPublicParameterMap(): The returned map is immutable
PortletRequest;Api Render;getPublicParameterMap3;TRUE;Method getPublicParameterMap(): Returns an empty map if no public parameters exist
PortletRequest;Api Render;exists;TRUE;The P3PUserInfos exists as a public static enum
PortletRequest;Api Action;fieldUSER_INFO;TRUE;Has String field USER_INFO with value of "javax.portlet.userinfo" 
PortletRequest;Api Action;fieldCCPP_PROFILE;TRUE;Has String field CCPP_PROFILE with value of "javax.portlet.ccpp" 
PortletRequest;Api Action;fieldBASIC_AUTH;TRUE;Has String field BASIC_AUTH with value of "BASIC" 
PortletRequest;Api Action;fieldFORM_AUTH;TRUE;Has String field FORM_AUTH with value of "FORM" 
PortletRequest;Api Action;fieldCLIENT_CERT_AUTH;TRUE;Has String field CLIENT_CERT_AUTH with value of "CLIENT_CERT" 
PortletRequest;Api Action;fieldDIGEST_AUTH;TRUE;Has String field DIGEST_AUTH with value of "DIGEST" 
PortletRequest;Api Action;fieldACTION_PHASE;TRUE;Has String field ACTION_PHASE with value of "ACTION_PHASE" 
PortletRequest;Api Action;fieldEVENT_PHASE;TRUE;Has String field EVENT_PHASE with value of "EVENT_PHASE" 
PortletRequest;Api Action;fieldRENDER_PHASE;TRUE;Has String field RENDER_PHASE with value of "RENDER_PHASE" 
PortletRequest;Api Action;fieldRESOURCE_PHASE;TRUE;Has String field RESOURCE_PHASE with value of "RESOURCE_PHASE" 
PortletRequest;Api Action;fieldLIFECYCLE_PHASE;TRUE;Has String field LIFECYCLE_PHASE with value of "javax.portlet.lifecycle_phase" 
PortletRequest;Api Action;fieldRENDER_PART;TRUE;Has String field RENDER_PART with value of "javax.portlet.render_part" 
PortletRequest;Api Action;fieldRENDER_HEADERS;TRUE;Has String field RENDER_HEADERS with value of "RENDER_HEADERS" 
PortletRequest;Api Action;fieldRENDER_MARKUP;TRUE;Has String field RENDER_MARKUP with value of "RENDER_MARKUP" 
PortletRequest;Api Action;fieldACTION_SCOPE_ID;TRUE;Has String field ACTION_SCOPE_ID with value of "javax.portlet.as" 
PortletRequest;Api Action;isWindowStateAllowed1;TRUE;Method isWindowStateAllowed(WindowState): Returns true if the specified WindowState is allowed
PortletRequest;Api Action;isWindowStateAllowed2;TRUE;Method isWindowStateAllowed(WindowState): Returns false if the specified WindowState is not allowed
PortletRequest;Api Action;isPortletModeAllowed1;TRUE;Method isPortletModeAllowed(PortletMode): Returns true if the specified PortletMode is allowed
PortletRequest;Api Action;isPortletModeAllowed2;TRUE;Method isPortletModeAllowed(PortletMode): Returns false if the specified PortletMode is not allowed
PortletRequest;Api Action;getPortletMode;TRUE;Method getPortletMode(): Returns current PortletMode 
PortletRequest;Api Action;getWindowState;TRUE;Method getWindowState(): Returns current WindowState
PortletRequest;Api Action;getPreferences;TRUE;Method getPreferences(): Returns the PortletPreferences object associated with the portlet
PortletRequest;Api Action;getPortletSessionA1;TRUE;Method getPortletSession(): Returns current PortletSession if one already exists
PortletRequest;Api Action;getPortletSessionA2;TRUE;Method getPortletSession(): Returns new PortletSession if one does not already exist
PortletRequest;Api Action;getPortletSessionB1;TRUE;Method getPortletSession(boolean): If input flag is true, returns current PortletSession if one already exists
PortletRequest;Api Action;getPortletSessionB2;TRUE;Method getPortletSession(boolean): If input flag is true, returns new PortletSession if one does not already exist
PortletRequest;Api Action;getPortletSessionB3;TRUE;Method getPortletSession(boolean): If input flag is false, returns current PortletSession if one already exists
PortletRequest;Api Action;getPortletSessionB4;TRUE;Method getPortletSession(boolean): If input flag is false, returns null if one does not already exist
PortletRequest;Api Action;getProperty1;TRUE;Method getProperty(String): If specified request property exists, returns its value 
PortletRequest;Api Action;getProperty2;TRUE;Method getProperty(String): If specified request property does not exist, returns null
PortletRequest;Api Action;getProperty3;TRUE;Method getProperty(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;getProperties1;TRUE;Method getProperties(String): If specified request property exists, returns its values as an Enumeration 
PortletRequest;Api Action;getProperties2;TRUE;Method getProperties(String): If specified request property does not exist, returns an empty Enumeration
PortletRequest;Api Action;getProperties3;TRUE;Method getProperties(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;getPropertyNames1;TRUE;Method getPropertyNames(): Returns an Enumeration of all request property names
PortletRequest;Api Action;getPropertyNames2;TRUE;Method getPropertyNames(): Returns an empty Enumeration if there are no request properties defined
PortletRequest;Api Action;getPortalContext;TRUE;Method getPortalContext(): Returns the context of the portal
PortletRequest;Api Action;getAuthType1;TRUE;Method getAuthType(): Returns a String indicating the authentication type if the request was authenticated
PortletRequest;Api Action;getAuthType2;TRUE;Method getAuthType(): Returns null if the request was not authenticated
PortletRequest;Api Action;getContextPath1;TRUE;Method getContextPath(): Returns a String representing the context path associated with the portlet
PortletRequest;Api Action;getContextPath2;TRUE;Method getContextPath(): Returns an empty String if the portlet is deployed in the default context
PortletRequest;Api Action;getContextPath3;TRUE;Method getContextPath(): If the context path is not empty, it must start with "/" and may not end with "/"
PortletRequest;Api Action;getRemoteUser1;TRUE;Method getRemoteUser(): Returns a String representing the login of the user if the request is authenticated
PortletRequest;Api Action;getRemoteUser2;TRUE;Method getRemoteUser(): Returns null if the request has not been authenticated
PortletRequest;Api Action;getUserPrincipal1;TRUE;Method getUserPrincipal(): Returns a java.security.Principal object representing the user if the request has been authenticated
PortletRequest;Api Action;getUserPrincipal2;TRUE;Method getUserPrincipal(): Returns null if the request has not been authenticated
PortletRequest;Api Action;isUserInRole1;TRUE;Method isUserInRole(): Returns true if the authenticated user is in the specified role
PortletRequest;Api Action;isUserInRole2;TRUE;Method isUserInRole(): Returns false if the authenticated user is not in the specified role
PortletRequest;Api Action;isUserInRole3;TRUE;Method isUserInRole(): Returns false if the user is not authenticated
PortletRequest;Api Action;getAttribute1;TRUE;Method getAttribute(String): Returns a java.lang.Object for the specified attribute name
PortletRequest;Api Action;getAttribute2;TRUE;Method getAttribute(String): Returns null if no attribute with the specified name exists
PortletRequest;Api Action;getAttribute3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;getAttributeNames1;TRUE;Method getAttributeNames(): Returns a java.util.Enumeration<java.lang.String> of the available attribute names
PortletRequest;Api Action;getAttributeNames2;TRUE;Method getAttributeNames(): Returns an empty Enumeration if there are no attributes available
PortletRequest;Api Action;getParameter1;TRUE;Method getParameter(String): Returns String value of parameter specified by the name
PortletRequest;Api Action;getParameter2;TRUE;Method getParameter(String): Returns String value of a public render parameter specified by the name
PortletRequest;Api Action;getParameter3;TRUE;Method getParameter(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Action;getParameter4;TRUE;Method getParameter(String): Returns first String value from values array if use with a multivalued parameter
PortletRequest;Api Action;getParameter5;TRUE;Method getParameter(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;getParameterNames1;TRUE;Method getParameterNames(): Returns a java.util.Enumeration<java.lang.String> of the available parameter names
PortletRequest;Api Action;getParameterNames2;TRUE;Method getParameterNames(): Returns an empty Enumeration if there are no parameters available
PortletRequest;Api Action;getParameterValues1;TRUE;Method getParameterValues(String): Returns String[] value of parameter specified by the name
PortletRequest;Api Action;getParameterValues2;TRUE;Method getParameterValues(String): Returns String[] value of a public render parameter specified by the name
PortletRequest;Api Action;getParameterValues3;TRUE;Method getParameterValues(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Action;getParameterValues4;TRUE;Method getParameterValues(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
PortletRequest;Api Action;getParameterMap2;TRUE;Method getParameterMap(): The returned map contains all public and private parameters for the request
PortletRequest;Api Action;getParameterMap3;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
PortletRequest;Api Action;isSecure1;TRUE;Method isSecure(): Returns true if the request was made through a secure channel
PortletRequest;Api Action;isSecure2;TRUE;Method isSecure(): Returns false if the request was not made through a secure channel
PortletRequest;Api Action;setAttribute1;TRUE;Method setAttribute(String, Object): Stores an attribute object under the specified name in the request
PortletRequest;Api Action;setAttribute2;TRUE;Method setAttribute(String, Object): Removes the attribute by the specified name if the object is null
PortletRequest;Api Action;setAttribute3;TRUE;Method setAttribute(String, Object): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;removeAttribute1;TRUE;Method removeAttribute(String): Removes the attribute specified by the name from the request
PortletRequest;Api Action;removeAttribute2;TRUE;Method removeAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Action;getRequestedSessionId1;TRUE;Method getRequestedSessionId(): Returns the session ID indicated in the client request
PortletRequest;Api Action;getRequestedSessionId2;TRUE;Method getRequestedSessionId(): Returns null if no session ID was indicated in the client request
PortletRequest;Api Action;isRequestedSessionIdValid1;TRUE;Method isRequestedSessionIdValid(): Returns true if the session ID is valid
PortletRequest;Api Action;isRequestedSessionIdValid2;TRUE;Method isRequestedSessionIdValid(): Returns false if the session ID is not valid
PortletRequest;Api Action;getResponseContentType1;TRUE;Method getResponseContentType(): Returns a String representing the portal preferred content type for the response if the content type is defined in the portlet descriptor  
PortletRequest;Api Action;getResponseContentType2;TRUE;Method getResponseContentType(): Returns an empty Enumeration if the content type is not defined in the portlet descriptor
PortletRequest;Api Action;getResponseContentTypes1;TRUE;Method getResponseContentTypes(): Returns an java.util.Enumeration<java.lang.String> object representing the portal preferred content types for the response if the content types are defined in the portlet descriptor
PortletRequest;Api Action;getResponseContentTypes2;TRUE;Method getResponseContentTypes(): Returns an empty Enumeration if the content types are not defined in the portlet descriptor
PortletRequest;Api Action;getLocale;TRUE;Method getLocale(): Returns an java.util.Locale object representing the preferred Locale for the response
PortletRequest;Api Action;getLocales;TRUE;Method getLocales(): Returns an java.util.Enumeration<java.util.Locale> of the Locales in which the portal will accept content
PortletRequest;Api Action;getScheme;TRUE;Method getScheme(): Returns a String value representing the scheme name for the request
PortletRequest;Api Action;getServerName;TRUE;Method getServerName(): Returns a String value representing the host name for the request
PortletRequest;Api Action;getServerPort;TRUE;Method getServerPort(): Returns an int value representing the port number for the request
PortletRequest;Api Action;getWindowID;TRUE;Method getWindowID(): Returns a String value representing the portlet window ID
PortletRequest;Api Action;getCookies1;TRUE;Method getCookies(): Returns a javax.servlet.http.Cookie[] array containing the cookies for this request
PortletRequest;Api Action;getCookies2;TRUE;Method getCookies(): Returns null if no cookies are present
PortletRequest;Api Action;getPrivateParameterMap1;TRUE;Method getPrivateParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the private parameter names and values if available
PortletRequest;Api Action;getPrivateParameterMap2;TRUE;Method getPrivateParameterMap(): The returned map is immutable
PortletRequest;Api Action;getPrivateParameterMap3;TRUE;Method getPrivateParameterMap(): Returns an empty map if no private parameters exist
PortletRequest;Api Action;getPublicParameterMap1;TRUE;Method getPublicParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the public parameter names and values if available
PortletRequest;Api Action;getPublicParameterMap2;TRUE;Method getPublicParameterMap(): The returned map is immutable
PortletRequest;Api Action;getPublicParameterMap3;TRUE;Method getPublicParameterMap(): Returns an empty map if no public parameters exist
PortletRequest;Api Action;exists;TRUE;Method exists(): The P3PUserInfos exist as a public static enum
PortletRequest;Api Event;fieldUSER_INFO;TRUE;Has String field USER_INFO with value of "javax.portlet.userinfo" 
PortletRequest;Api Event;fieldCCPP_PROFILE;TRUE;Has String field CCPP_PROFILE with value of "javax.portlet.ccpp" 
PortletRequest;Api Event;fieldBASIC_AUTH;TRUE;Has String field BASIC_AUTH with value of "BASIC" 
PortletRequest;Api Event;fieldFORM_AUTH;TRUE;Has String field FORM_AUTH with value of "FORM" 
PortletRequest;Api Event;fieldCLIENT_CERT_AUTH;TRUE;Has String field CLIENT_CERT_AUTH with value of "CLIENT_CERT" 
PortletRequest;Api Event;fieldDIGEST_AUTH;TRUE;Has String field DIGEST_AUTH with value of "DIGEST" 
PortletRequest;Api Event;fieldACTION_PHASE;TRUE;Has String field ACTION_PHASE with value of "ACTION_PHASE" 
PortletRequest;Api Event;fieldEVENT_PHASE;TRUE;Has String field EVENT_PHASE with value of "EVENT_PHASE" 
PortletRequest;Api Event;fieldRENDER_PHASE;TRUE;Has String field RENDER_PHASE with value of "RENDER_PHASE" 
PortletRequest;Api Event;fieldRESOURCE_PHASE;TRUE;Has String field RESOURCE_PHASE with value of "RESOURCE_PHASE" 
PortletRequest;Api Event;fieldLIFECYCLE_PHASE;TRUE;Has String field LIFECYCLE_PHASE with value of "javax.portlet.lifecycle_phase" 
PortletRequest;Api Event;fieldRENDER_PART;TRUE;Has String field RENDER_PART with value of "javax.portlet.render_part" 
PortletRequest;Api Event;fieldRENDER_HEADERS;TRUE;Has String field RENDER_HEADERS with value of "RENDER_HEADERS" 
PortletRequest;Api Event;fieldRENDER_MARKUP;TRUE;Has String field RENDER_MARKUP with value of "RENDER_MARKUP" 
PortletRequest;Api Event;fieldACTION_SCOPE_ID;TRUE;Has String field ACTION_SCOPE_ID with value of "javax.portlet.as" 
PortletRequest;Api Event;isWindowStateAllowed1;TRUE;Method isWindowStateAllowed(WindowState): Returns true if the specified WindowState is allowed
PortletRequest;Api Event;isWindowStateAllowed2;TRUE;Method isWindowStateAllowed(WindowState): Returns false if the specified WindowState is not allowed
PortletRequest;Api Event;isPortletModeAllowed1;TRUE;Method isPortletModeAllowed(PortletMode): Returns true if the specified PortletMode is allowed
PortletRequest;Api Event;isPortletModeAllowed2;TRUE;Method isPortletModeAllowed(PortletMode): Returns false if the specified PortletMode is not allowed
PortletRequest;Api Event;getPortletMode;TRUE;Method getPortletMode(): Returns current PortletMode 
PortletRequest;Api Event;getWindowState;TRUE;Method getWindowState(): Returns current WindowState
PortletRequest;Api Event;getPreferences;TRUE;Method getPreferences(): Returns the PortletPreferences object associated with the portlet
PortletRequest;Api Event;getPortletSessionA1;TRUE;Method getPortletSession(): Returns current PortletSession if one already exists
PortletRequest;Api Event;getPortletSessionA2;TRUE;Method getPortletSession(): Returns new PortletSession if one does not already exist
PortletRequest;Api Event;getPortletSessionB1;TRUE;Method getPortletSession(boolean): If input flag is true, returns current PortletSession if one already exists
PortletRequest;Api Event;getPortletSessionB2;TRUE;Method getPortletSession(boolean): If input flag is true, returns new PortletSession if one does not already exist
PortletRequest;Api Event;getPortletSessionB3;TRUE;Method getPortletSession(boolean): If input flag is false, returns current PortletSession if one already exists
PortletRequest;Api Event;getPortletSessionB4;TRUE;Method getPortletSession(boolean): If input flag is false, returns null if one does not already exist
PortletRequest;Api Event;getProperty1;TRUE;Method getProperty(String): If specified request property exists, returns its value 
PortletRequest;Api Event;getProperty2;TRUE;Method getProperty(String): If specified request property does not exist, returns null
PortletRequest;Api Event;getProperty3;TRUE;Method getProperty(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;getProperties1;TRUE;Method getProperties(String): If specified request property exists, returns its values as an Enumeration 
PortletRequest;Api Event;getProperties2;TRUE;Method getProperties(String): If specified request property does not exist, returns an empty Enumeration
PortletRequest;Api Event;getProperties3;TRUE;Method getProperties(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;getPropertyNames1;TRUE;Method getPropertyNames(): Returns an Enumeration of all request property names
PortletRequest;Api Event;getPropertyNames2;TRUE;Method getPropertyNames(): Returns an empty Enumeration if there are no request properties defined
PortletRequest;Api Event;getPortalContext;TRUE;Method getPortalContext(): Returns the context of the portal
PortletRequest;Api Event;getAuthType1;TRUE;Method getAuthType(): Returns a String indicating the authentication type if the request was authenticated
PortletRequest;Api Event;getAuthType2;TRUE;Method getAuthType(): Returns null if the request was not authenticated
PortletRequest;Api Event;getContextPath1;TRUE;Method getContextPath(): Returns a String representing the context path associated with the portlet
PortletRequest;Api Event;getContextPath2;TRUE;Method getContextPath(): Returns an empty String if the portlet is deployed in the default context
PortletRequest;Api Event;getContextPath3;TRUE;Method getContextPath(): If the context path is not empty, it must start with "/" and may not end with "/"
PortletRequest;Api Event;getRemoteUser1;TRUE;Method getRemoteUser(): Returns a String representing the login of the user if the request is authenticated
PortletRequest;Api Event;getRemoteUser2;TRUE;Method getRemoteUser(): Returns null if the request has not been authenticated
PortletRequest;Api Event;getUserPrincipal1;TRUE;Method getUserPrincipal(): Returns a java.security.Principal object representing the user if the request has been authenticated
PortletRequest;Api Event;getUserPrincipal2;TRUE;Method getUserPrincipal(): Returns null if the request has not been authenticated
PortletRequest;Api Event;isUserInRole1;TRUE;Method isUserInRole(): Returns true if the authenticated user is in the specified role
PortletRequest;Api Event;isUserInRole2;TRUE;Method isUserInRole(): Returns false if the authenticated user is not in the specified role
PortletRequest;Api Event;isUserInRole3;TRUE;Method isUserInRole(): Returns false if the user is not authenticated
PortletRequest;Api Event;getAttribute1;TRUE;Method getAttribute(String): Returns a java.lang.Object for the specified attribute name
PortletRequest;Api Event;getAttribute2;TRUE;Method getAttribute(String): Returns null if no attribute with the specified name exists
PortletRequest;Api Event;getAttribute3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;getAttributeNames1;TRUE;Method getAttributeNames(): Returns a java.util.Enumeration<java.lang.String> of the available attribute names
PortletRequest;Api Event;getAttributeNames2;TRUE;Method getAttributeNames(): Returns an empty Enumeration if there are no attributes available
PortletRequest;Api Event;getParameter1;TRUE;Method getParameter(String): Returns String value of parameter specified by the name
PortletRequest;Api Event;getParameter2;TRUE;Method getParameter(String): Returns String value of a public render parameter specified by the name
PortletRequest;Api Event;getParameter3;TRUE;Method getParameter(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Event;getParameter4;TRUE;Method getParameter(String): Returns first String value from values array if use with a multivalued parameter
PortletRequest;Api Event;getParameter5;TRUE;Method getParameter(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;getParameterNames1;TRUE;Method getParameterNames(): Returns a java.util.Enumeration<java.lang.String> of the available parameter names
PortletRequest;Api Event;getParameterNames2;TRUE;Method getParameterNames(): Returns an empty Enumeration if there are no parameters available
PortletRequest;Api Event;getParameterValues1;TRUE;Method getParameterValues(String): Returns String[] value of parameter specified by the name
PortletRequest;Api Event;getParameterValues2;TRUE;Method getParameterValues(String): Returns String[] value of a public render parameter specified by the name
PortletRequest;Api Event;getParameterValues3;TRUE;Method getParameterValues(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Event;getParameterValues4;TRUE;Method getParameterValues(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
PortletRequest;Api Event;getParameterMap2;TRUE;Method getParameterMap(): The returned map contains all public and private parameters for the request
PortletRequest;Api Event;getParameterMap3;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
PortletRequest;Api Event;isSecure1;TRUE;Method isSecure(): Returns true if the request was made through a secure channel
PortletRequest;Api Event;isSecure2;TRUE;Method isSecure(): Returns false if the request was not made through a secure channel
PortletRequest;Api Event;setAttribute1;TRUE;Method setAttribute(String, Object): Stores an attribute object under the specified name in the request
PortletRequest;Api Event;setAttribute2;TRUE;Method setAttribute(String, Object): Removes the attribute by the specified name if the object is null
PortletRequest;Api Event;setAttribute3;TRUE;Method setAttribute(String, Object): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;removeAttribute1;TRUE;Method removeAttribute(String): Removes the attribute specified by the name from the request
PortletRequest;Api Event;removeAttribute2;TRUE;Method removeAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Event;getRequestedSessionId1;TRUE;Method getRequestedSessionId(): Returns the session ID indicated in the client request
PortletRequest;Api Event;getRequestedSessionId2;TRUE;Method getRequestedSessionId(): Returns null if no session ID was indicated in the client request
PortletRequest;Api Event;isRequestedSessionIdValid1;TRUE;Method isRequestedSessionIdValid(): Returns true if the session ID is valid
PortletRequest;Api Event;isRequestedSessionIdValid2;TRUE;Method isRequestedSessionIdValid(): Returns false if the session ID is not valid
PortletRequest;Api Event;getResponseContentType1;TRUE;Method getResponseContentType(): Returns a String representing the portal preferred content type for the response if the content type is defined in the portlet descriptor  
PortletRequest;Api Event;getResponseContentType2;TRUE;Method getResponseContentType(): Returns an empty Enumeration if the content type is not defined in the portlet descriptor
PortletRequest;Api Event;getResponseContentTypes1;TRUE;Method getResponseContentTypes(): Returns an java.util.Enumeration<java.lang.String> object representing the portal preferred content types for the response if the content types are defined in the portlet descriptor
PortletRequest;Api Event;getResponseContentTypes2;TRUE;Method getResponseContentTypes(): Returns an empty Enumeration if the content types are not defined in the portlet descriptor
PortletRequest;Api Event;getLocale;TRUE;Method getLocale(): Returns an java.util.Locale object representing the preferred Locale for the response
PortletRequest;Api Event;getLocales;TRUE;Method getLocales(): Returns an java.util.Enumeration<java.util.Locale> of the Locales in which the portal will accept content
PortletRequest;Api Event;getScheme;TRUE;Method getScheme(): Returns a String value representing the scheme name for the request
PortletRequest;Api Event;getServerName;TRUE;Method getServerName(): Returns a String value representing the host name for the request
PortletRequest;Api Event;getServerPort;TRUE;Method getServerPort(): Returns an int value representing the port number for the request
PortletRequest;Api Event;getWindowID;TRUE;Method getWindowID(): Returns a String value representing the portlet window ID
PortletRequest;Api Event;getCookies1;TRUE;Method getCookies(): Returns a javax.servlet.http.Cookie[] array containing the cookies for this request
PortletRequest;Api Event;getCookies2;TRUE;Method getCookies(): Returns null if no cookies are present
PortletRequest;Api Event;getPrivateParameterMap1;TRUE;Method getPrivateParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the private parameter names and values if available
PortletRequest;Api Event;getPrivateParameterMap2;TRUE;Method getPrivateParameterMap(): The returned map is immutable
PortletRequest;Api Event;getPrivateParameterMap3;TRUE;Method getPrivateParameterMap(): Returns an empty map if no private parameters exist
PortletRequest;Api Event;getPublicParameterMap1;TRUE;Method getPublicParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the public parameter names and values if available
PortletRequest;Api Event;getPublicParameterMap2;TRUE;Method getPublicParameterMap(): The returned map is immutable
PortletRequest;Api Event;getPublicParameterMap3;TRUE;Method getPublicParameterMap(): Returns an empty map if no public parameters exist
PortletRequest;Api Event;exists;TRUE;Method exists(): The P3PUserInfos exist as a public static enum
PortletRequest;Api Resource;fieldUSER_INFO;TRUE;Has String field USER_INFO with value of "javax.portlet.userinfo" 
PortletRequest;Api Resource;fieldCCPP_PROFILE;TRUE;Has String field CCPP_PROFILE with value of "javax.portlet.ccpp" 
PortletRequest;Api Resource;fieldBASIC_AUTH;TRUE;Has String field BASIC_AUTH with value of "BASIC" 
PortletRequest;Api Resource;fieldFORM_AUTH;TRUE;Has String field FORM_AUTH with value of "FORM" 
PortletRequest;Api Resource;fieldCLIENT_CERT_AUTH;TRUE;Has String field CLIENT_CERT_AUTH with value of "CLIENT_CERT" 
PortletRequest;Api Resource;fieldDIGEST_AUTH;TRUE;Has String field DIGEST_AUTH with value of "DIGEST" 
PortletRequest;Api Resource;fieldACTION_PHASE;TRUE;Has String field ACTION_PHASE with value of "ACTION_PHASE" 
PortletRequest;Api Resource;fieldEVENT_PHASE;TRUE;Has String field EVENT_PHASE with value of "EVENT_PHASE" 
PortletRequest;Api Resource;fieldRENDER_PHASE;TRUE;Has String field RENDER_PHASE with value of "RENDER_PHASE" 
PortletRequest;Api Resource;fieldRESOURCE_PHASE;TRUE;Has String field RESOURCE_PHASE with value of "RESOURCE_PHASE" 
PortletRequest;Api Resource;fieldLIFECYCLE_PHASE;TRUE;Has String field LIFECYCLE_PHASE with value of "javax.portlet.lifecycle_phase" 
PortletRequest;Api Resource;fieldRENDER_PART;TRUE;Has String field RENDER_PART with value of "javax.portlet.render_part" 
PortletRequest;Api Resource;fieldRENDER_HEADERS;TRUE;Has String field RENDER_HEADERS with value of "RENDER_HEADERS" 
PortletRequest;Api Resource;fieldRENDER_MARKUP;TRUE;Has String field RENDER_MARKUP with value of "RENDER_MARKUP" 
PortletRequest;Api Resource;fieldACTION_SCOPE_ID;TRUE;Has String field ACTION_SCOPE_ID with value of "javax.portlet.as" 
PortletRequest;Api Resource;isWindowStateAllowed1;TRUE;Method isWindowStateAllowed(WindowState): Returns true if the specified WindowState is allowed
PortletRequest;Api Resource;isWindowStateAllowed2;TRUE;Method isWindowStateAllowed(WindowState): Returns false if the specified WindowState is not allowed
PortletRequest;Api Resource;isPortletModeAllowed1;TRUE;Method isPortletModeAllowed(PortletMode): Returns true if the specified PortletMode is allowed
PortletRequest;Api Resource;isPortletModeAllowed2;TRUE;Method isPortletModeAllowed(PortletMode): Returns false if the specified PortletMode is not allowed
PortletRequest;Api Resource;getPortletMode;TRUE;Method getPortletMode(): Returns current PortletMode 
PortletRequest;Api Resource;getWindowState;TRUE;Method getWindowState(): Returns current WindowState
PortletRequest;Api Resource;getPreferences;TRUE;Method getPreferences(): Returns the PortletPreferences object associated with the portlet
PortletRequest;Api Resource;getPortletSessionA1;TRUE;Method getPortletSession(): Returns current PortletSession if one already exists
PortletRequest;Api Resource;getPortletSessionA2;TRUE;Method getPortletSession(): Returns new PortletSession if one does not already exist
PortletRequest;Api Resource;getPortletSessionB1;TRUE;Method getPortletSession(boolean): If input flag is true, returns current PortletSession if one already exists
PortletRequest;Api Resource;getPortletSessionB2;TRUE;Method getPortletSession(boolean): If input flag is true, returns new PortletSession if one does not already exist
PortletRequest;Api Resource;getPortletSessionB3;TRUE;Method getPortletSession(boolean): If input flag is false, returns current PortletSession if one already exists
PortletRequest;Api Resource;getPortletSessionB4;TRUE;Method getPortletSession(boolean): If input flag is false, returns null if one does not already exist
PortletRequest;Api Resource;getProperty1;TRUE;Method getProperty(String): If specified request property exists, returns its value 
PortletRequest;Api Resource;getProperty2;TRUE;Method getProperty(String): If specified request property does not exist, returns null
PortletRequest;Api Resource;getProperty3;TRUE;Method getProperty(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;getProperties1;TRUE;Method getProperties(String): If specified request property exists, returns its values as an Enumeration 
PortletRequest;Api Resource;getProperties2;TRUE;Method getProperties(String): If specified request property does not exist, returns an empty Enumeration
PortletRequest;Api Resource;getProperties3;TRUE;Method getProperties(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;getPropertyNames1;TRUE;Method getPropertyNames(): Returns an Enumeration of all request property names
PortletRequest;Api Resource;getPropertyNames2;TRUE;Method getPropertyNames(): Returns an empty Enumeration if there are no request properties defined
PortletRequest;Api Resource;getPortalContext;TRUE;Method getPortalContext(): Returns the context of the portal
PortletRequest;Api Resource;getAuthType1;TRUE;Method getAuthType(): Returns a String indicating the authentication type if the request was authenticated
PortletRequest;Api Resource;getAuthType2;TRUE;Method getAuthType(): Returns null if the request was not authenticated
PortletRequest;Api Resource;getContextPath1;TRUE;Method getContextPath(): Returns a String representing the context path associated with the portlet
PortletRequest;Api Resource;getContextPath2;TRUE;Method getContextPath(): Returns an empty String if the portlet is deployed in the default context
PortletRequest;Api Resource;getContextPath3;TRUE;Method getContextPath(): If the context path is not empty, it must start with "/" and may not end with "/"
PortletRequest;Api Resource;getRemoteUser1;TRUE;Method getRemoteUser(): Returns a String representing the login of the user if the request is authenticated
PortletRequest;Api Resource;getRemoteUser2;TRUE;Method getRemoteUser(): Returns null if the request has not been authenticated
PortletRequest;Api Resource;getUserPrincipal1;TRUE;Method getUserPrincipal(): Returns a java.security.Principal object representing the user if the request has been authenticated
PortletRequest;Api Resource;getUserPrincipal2;TRUE;Method getUserPrincipal(): Returns null if the request has not been authenticated
PortletRequest;Api Resource;isUserInRole1;TRUE;Method isUserInRole(): Returns true if the authenticated user is in the specified role
PortletRequest;Api Resource;isUserInRole2;TRUE;Method isUserInRole(): Returns false if the authenticated user is not in the specified role
PortletRequest;Api Resource;isUserInRole3;TRUE;Method isUserInRole(): Returns false if the user is not authenticated
PortletRequest;Api Resource;getAttribute1;TRUE;Method getAttribute(String): Returns a java.lang.Object for the specified attribute name
PortletRequest;Api Resource;getAttribute2;TRUE;Method getAttribute(String): Returns null if no attribute with the specified name exists
PortletRequest;Api Resource;getAttribute3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;getAttributeNames1;TRUE;Method getAttributeNames(): Returns a java.util.Enumeration<java.lang.String> of the available attribute names
PortletRequest;Api Resource;getAttributeNames2;TRUE;Method getAttributeNames(): Returns an empty Enumeration if there are no attributes available
PortletRequest;Api Resource;getParameter1;TRUE;Method getParameter(String): Returns String value of parameter specified by the name
PortletRequest;Api Resource;getParameter2;TRUE;Method getParameter(String): Returns String value of a public render parameter specified by the name
PortletRequest;Api Resource;getParameter3;TRUE;Method getParameter(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Resource;getParameter4;TRUE;Method getParameter(String): Returns first String value from values array if use with a multivalued parameter
PortletRequest;Api Resource;getParameter5;TRUE;Method getParameter(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;getParameterNames1;TRUE;Method getParameterNames(): Returns a java.util.Enumeration<java.lang.String> of the available parameter names
PortletRequest;Api Resource;getParameterNames2;TRUE;Method getParameterNames(): Returns an empty Enumeration if there are no parameters available
PortletRequest;Api Resource;getParameterValues1;TRUE;Method getParameterValues(String): Returns String[] value of parameter specified by the name
PortletRequest;Api Resource;getParameterValues2;TRUE;Method getParameterValues(String): Returns String[] value of a public render parameter specified by the name
PortletRequest;Api Resource;getParameterValues3;TRUE;Method getParameterValues(String): Returns null if no parameter exists for the specified name
PortletRequest;Api Resource;getParameterValues4;TRUE;Method getParameterValues(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
PortletRequest;Api Resource;getParameterMap2;TRUE;Method getParameterMap(): The returned map contains all public and private parameters for the request
PortletRequest;Api Resource;getParameterMap3;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
PortletRequest;Api Resource;isSecure1;TRUE;Method isSecure(): Returns true if the request was made through a secure channel
PortletRequest;Api Resource;isSecure2;TRUE;Method isSecure(): Returns false if the request was not made through a secure channel
PortletRequest;Api Resource;setAttribute1;TRUE;Method setAttribute(String, Object): Stores an attribute object under the specified name in the request
PortletRequest;Api Resource;setAttribute2;TRUE;Method setAttribute(String, Object): Removes the attribute by the specified name if the object is null
PortletRequest;Api Resource;setAttribute3;TRUE;Method setAttribute(String, Object): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;removeAttribute1;TRUE;Method removeAttribute(String): Removes the attribute specified by the name from the request
PortletRequest;Api Resource;removeAttribute2;TRUE;Method removeAttribute(String): Throws IllegalArgumentException if the name is null
PortletRequest;Api Resource;getRequestedSessionId1;TRUE;Method getRequestedSessionId(): Returns the session ID indicated in the client request
PortletRequest;Api Resource;getRequestedSessionId2;TRUE;Method getRequestedSessionId(): Returns null if no session ID was indicated in the client request
PortletRequest;Api Resource;isRequestedSessionIdValid1;TRUE;Method isRequestedSessionIdValid(): Returns true if the session ID is valid
PortletRequest;Api Resource;isRequestedSessionIdValid2;TRUE;Method isRequestedSessionIdValid(): Returns false if the session ID is not valid
PortletRequest;Api Resource;getResponseContentType1;TRUE;Method getResponseContentType(): Returns a String representing the portal preferred content type for the response if the content type is defined in the portlet descriptor  
PortletRequest;Api Resource;getResponseContentType2;TRUE;Method getResponseContentType(): Returns an empty Enumeration if the content type is not defined in the portlet descriptor
PortletRequest;Api Resource;getResponseContentTypes1;TRUE;Method getResponseContentTypes(): Returns an java.util.Enumeration<java.lang.String> object representing the portal preferred content types for the response if the content types are defined in the portlet descriptor
PortletRequest;Api Resource;getResponseContentTypes2;TRUE;Method getResponseContentTypes(): Returns an empty Enumeration if the content types are not defined in the portlet descriptor
PortletRequest;Api Resource;getLocale;TRUE;Method getLocale(): Returns an java.util.Locale object representing the preferred Locale for the response
PortletRequest;Api Resource;getLocales;TRUE;Method getLocales(): Returns an java.util.Enumeration<java.util.Locale> of the Locales in which the portal will accept content
PortletRequest;Api Resource;getScheme;TRUE;Method getScheme(): Returns a String value representing the scheme name for the request
PortletRequest;Api Resource;getServerName;TRUE;Method getServerName(): Returns a String value representing the host name for the request
PortletRequest;Api Resource;getServerPort;TRUE;Method getServerPort(): Returns an int value representing the port number for the request
PortletRequest;Api Resource;getWindowID;TRUE;Method getWindowID(): Returns a String value representing the portlet window ID
PortletRequest;Api Resource;getCookies1;TRUE;Method getCookies(): Returns a javax.servlet.http.Cookie[] array containing the cookies for this request
PortletRequest;Api Resource;getCookies2;TRUE;Method getCookies(): Returns null if no cookies are present
PortletRequest;Api Resource;getPrivateParameterMap1;TRUE;Method getPrivateParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the private parameter names and values if available
PortletRequest;Api Resource;getPrivateParameterMap2;TRUE;Method getPrivateParameterMap(): The returned map is immutable
PortletRequest;Api Resource;getPrivateParameterMap3;TRUE;Method getPrivateParameterMap(): Returns an empty map if no private parameters exist
PortletRequest;Api Resource;getPublicParameterMap1;TRUE;Method getPublicParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the public parameter names and values if available
PortletRequest;Api Resource;getPublicParameterMap2;TRUE;Method getPublicParameterMap(): The returned map is immutable
PortletRequest;Api Resource;getPublicParameterMap3;TRUE;Method getPublicParameterMap(): Returns an empty map if no public parameters exist
PortletRequest;Api Resource;exists;TRUE;Method exists(): The P3PUserInfos exist as a public static enum
ClientDataRequest;Api Action;getPortletInputStream1;TRUE;Method getPortletInputStream(): Returns an InputStream object
ClientDataRequest;Api Action;getPortletInputStream2;TRUE;Method getPortletInputStream(): Throws IllegalStateException if getReader was already called
ClientDataRequest;Api Action;getPortletInputStream3;TRUE;Method getPortletInputStream(): Throws IllegalStateException if the request has HTTP POST data of type application/x-www-form-urlencoded
ClientDataRequest;Api Action;getPortletInputStream4;FALSE;Method getPortletInputStream(): Throws IOException if an I/O error occurs
ClientDataRequest;Api Action;setCharacterEncoding1;TRUE;Method setCharacterEncoding(String): Allows the character encoding for the body of the request to be overridden
ClientDataRequest;Api Action;setCharacterEncoding2;TRUE;Method setCharacterEncoding(String): Throws IllegalStateException if method is called after reading request parameters
ClientDataRequest;Api Action;setCharacterEncoding3;TRUE;Method setCharacterEncoding(String): Throws IllegalStateException if method is called after using the getReader(): method
ClientDataRequest;Api Action;setCharacterEncoding4;TRUE;Method setCharacterEncoding(String): Throws UnsupportedEncodingException if the specified encoding is not valid
ClientDataRequest;Api Action;getReader1;TRUE;Method getReader(): Returns a BufferedReader object for reading the request
ClientDataRequest;Api Action;getReader2;TRUE;Method getReader(): Throws IllegalStateException if getPortletInputStream was already called
ClientDataRequest;Api Action;getReader3;TRUE;Method getReader(): Throws IllegalStateException if the request has HTTP POST data of type application/x-www-form-urlencoded
ClientDataRequest;Api Action;getReader4;FALSE;Method getReader(): Throws IOException if an I/O error occurs
ClientDataRequest;Api Action;getReader5;TRUE;Method getReader(): Throws UnsupportedEncodingException if the character set encoding is not valid so that the text cannot be decoded
ClientDataRequest;Api Action;getCharacterEncoding1;TRUE;Method getCharacterEncoding(): Returns a String containing the name of the character encoding used in the request body
ClientDataRequest;Api Action;getCharacterEncoding2;TRUE;Method getCharacterEncoding(): Returns null if the request does not specify a character encoding
ClientDataRequest;Api Action;getContentType1;TRUE;Method getContentType(): Returns a String containing the MIME type of the request body
ClientDataRequest;Api Action;getContentType2;TRUE;Method getContentType(): Returns null if the MIME type is unknown
ClientDataRequest;Api Action;getContentLength1;TRUE;Method getContentLength(): Returns the length in bytes of the request body
ClientDataRequest;Api Action;getContentLength2;TRUE;Method getContentLength(): Returns -1 if the length is unknown
ClientDataRequest;Api Action;getMethod;TRUE;Method getMethod(): Returns a String containing the name of the HTTP method with which the request was made
ClientDataRequest;Api Resource;getPortletInputStream1;TRUE;Method getPortletInputStream(): Returns an InputStream object
ClientDataRequest;Api Resource;getPortletInputStream2;TRUE;Method getPortletInputStream(): Throws IllegalStateException if getReader was already called
ClientDataRequest;Api Resource;getPortletInputStream3;TRUE;Method getPortletInputStream(): Throws IllegalStateException if the request has HTTP POST data of type application/x-www-form-urlencoded
ClientDataRequest;Api Resource;getPortletInputStream4;FALSE;Method getPortletInputStream(): Throws IOException if an I/O error occurs
ClientDataRequest;Api Resource;setCharacterEncoding1;TRUE;Method setCharacterEncoding(String): Allows the character encoding for the body of the request to be overridden
ClientDataRequest;Api Resource;setCharacterEncoding2;TRUE;Method setCharacterEncoding(String): Throws IllegalStateException if method is called after reading request parameters
ClientDataRequest;Api Resource;setCharacterEncoding3;TRUE;Method setCharacterEncoding(String): Throws IllegalStateException if method is called after using the getReader(): method
ClientDataRequest;Api Resource;setCharacterEncoding4;TRUE;Method setCharacterEncoding(String): Throws UnsupportedEncodingException if the specified encoding is not valid
ClientDataRequest;Api Resource;getReader1;TRUE;Method getReader(): Returns a BufferedReader object for reading the request
ClientDataRequest;Api Resource;getReader2;TRUE;Method getReader(): Throws IllegalStateException if getPortletInputStream was already called
ClientDataRequest;Api Resource;getReader3;TRUE;Method getReader(): Throws IllegalStateException if the request has HTTP POST data of type application/x-www-form-urlencoded
ClientDataRequest;Api Resource;getReader4;FALSE;Method getReader(): Throws IOException if an I/O error occurs
ClientDataRequest;Api Resource;getReader5;TRUE;Method getReader(): Throws UnsupportedEncodingException if the character set encoding is not valid so that the text cannot be decoded
ClientDataRequest;Api Resource;getCharacterEncoding1;TRUE;Method getCharacterEncoding(): Returns a String containing the name of the character encoding used in the request body
ClientDataRequest;Api Resource;getCharacterEncoding2;TRUE;Method getCharacterEncoding(): Returns null if the request does not specify a character encoding
ClientDataRequest;Api Resource;getContentType1;TRUE;Method getContentType(): Returns a String containing the MIME type of the request body
ClientDataRequest;Api Resource;getContentType2;TRUE;Method getContentType(): Returns null if the MIME type is unknown
ClientDataRequest;Api Resource;getContentLength1;TRUE;Method getContentLength(): Returns the length in bytes of the request body
ClientDataRequest;Api Resource;getContentLength2;TRUE;Method getContentLength(): Returns -1 if the length is unknown
ClientDataRequest;Api Resource;getMethod;TRUE;Method getMethod(): Returns a String containing the name of the HTTP method with which the request was made
ActionRequest;Api Action;fieldACTION_NAME;TRUE;Has String field ACTION_NAME with value of "javax.portlet.action" 
ResourceRequest;Api Resource;fieldETAG;TRUE;Has String field ETAG with value of "portlet.ETag" 
ResourceRequest;Api Resource;getETag2;TRUE;Method getETag(): Returns null if there is no cached response
ResourceRequest;Api Resource;getResourceID1;TRUE;Method getResourceID(): Returns a String containing the resource ID set on the resource URL
ResourceRequest;Api Resource;getResourceID2;TRUE;Method getResourceID(): Returns null if no resource ID was set on the URL
ResourceRequest;Api Resource;getPrivateRenderParameterMap1;TRUE;Method getPrivateRenderParameterMap(): Returns a java.util.Map<java.lang.String,java.lang.String[]> object containing the private render parameters for the request
ResourceRequest;Api Resource;getPrivateRenderParameterMap2;TRUE;Method getPrivateRenderParameterMap(): The returned map does not contain the resource parameters set on the URL
ResourceRequest;Api Resource;getPrivateRenderParameterMap3;TRUE;Method getPrivateRenderParameterMap(): The returned map is immutable
ResourceRequest;Api Resource;getPrivateRenderParameterMap4;TRUE;Method getPrivateRenderParameterMap(): Returns an empty map if there are no private render parameters
ResourceRequest;Api Resource;getResponseContentType;TRUE;Method getResponseContentType(): Returns a String containing the preferred content type for the resonse
ResourceRequest;Api Resource;getResponseContentTypes;TRUE;Method getResponseContentTypes(): Returns an java.util.Enumeration<java.lang.String> object containing the content types that will be accepted for the response
ResourceRequest;Api Resource;getCacheability;TRUE;Method getCacheability(): Returns a String containing the cache level of the resource request
EventRequest;Api Event;getEvent;TRUE;Method getEvent(): Returns the Event object that triggered the call to the processEvent method
EventRequest;Api Event;getMethod;TRUE;Method getMethod(): Returns a String containing the name of the HTTP method with which the request was made
RenderRequest;Api Render;fieldETAG;TRUE;Has String field ETAG with value of "portlet.ETag" 
RenderRequest;Api Render;getETag2;TRUE;Method getETag(): Returns null if there is no cached response
Response Tests;;;;
PortletResponse;Api Render;addPropertyA1;TRUE;Method addProperty(javax.servlet.http.Cookie): Adds the specified cookie property to the response
PortletResponse;Api Render;addPropertyA2;TRUE;Method addProperty(javax.servlet.http.Cookie): Throws IllegalArgumentException if the specified cookie is null
PortletResponse;Api Render;addPropertyB1;TRUE;Method addProperty(String, org.w3c.dom.Element): Adds an XML DOM Element to the response for the specified key
PortletResponse;Api Render;addPropertyB2;TRUE;Method addProperty(String, org.w3c.dom.Element): If a DOM Element for the specified key already exists, the new element is added in addition to the existing element
PortletResponse;Api Render;addPropertyB3;TRUE;Method addProperty(String, org.w3c.dom.Element): If the specified DOM Element value is null, the key is removed from the response
PortletResponse;Api Render;addPropertyB4;TRUE;Method addProperty(String, org.w3c.dom.Element): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Render;addPropertyC1;TRUE;Method addProperty(String, String): Adds a property value to an existing key to allow the key to have multiple values
PortletResponse;Api Render;addPropertyC2;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Render;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
PortletResponse;Api Render;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
PortletResponse;Api Render;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Render;encodeURL1;TRUE;Method encodeURL(String): Returns a String representing the encoded URL
PortletResponse;Api Render;encodeURL2;TRUE;Method encodeURL(String): Throws IllegalArgumentException if the input string is not an absolute URL and does not start with at "/" character
PortletResponse;Api Render;getNamespace1;TRUE;Method getNamespace(): Returns a String containing the namespace value
PortletResponse;Api Render;getNamespace2;FALSE;Method getNamespace(): The returned namespace is constant for the lifetime of the portlet window
PortletResponse;Api Render;createElement1;TRUE;Method createElement(String): Returns an org.w3c.dom.Element object for the specified tag name
PortletResponse;Api Render;createElement2;TRUE;Method createElement(String): The returned Element has nodeName set to the the specified tag name 
PortletResponse;Api Render;createElement3;TRUE;Method createElement(String): The returned Element has localName set to null
PortletResponse;Api Render;createElement4;TRUE;Method createElement(String): The returned Element has prefix set to null
PortletResponse;Api Render;createElement5;TRUE;Method createElement(String): The returned Element has namespaceURI set to null
PortletResponse;Api Render;createElement6;TRUE;Method createElement(String): Throws org.w3c.dom.DOMException - INVALID_CHARACTER_ERR if the specified name contains an illegal character. 
PortletResponse;Api Resource;addPropertyA1;TRUE;Method addProperty(javax.servlet.http.Cookie): Adds the specified cookie property to the response
PortletResponse;Api Resource;addPropertyA2;TRUE;Method addProperty(javax.servlet.http.Cookie): Throws IllegalArgumentException if the specified cookie is null
PortletResponse;Api Resource;addPropertyB1;TRUE;Method addProperty(String, org.w3c.dom.Element): Adds an XML DOM Element to the response for the specified key
PortletResponse;Api Resource;addPropertyB2;TRUE;Method addProperty(String, org.w3c.dom.Element): If a DOM Element for the specified key already exists, the new element is added in addition to the existing element
PortletResponse;Api Resource;addPropertyB3;TRUE;Method addProperty(String, org.w3c.dom.Element): If the specified DOM Element value is null, the key is removed from the response
PortletResponse;Api Resource;addPropertyB4;TRUE;Method addProperty(String, org.w3c.dom.Element): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Resource;addPropertyC1;TRUE;Method addProperty(String, String): Adds a property value to an existing key to allow the key to have multiple values
PortletResponse;Api Resource;addPropertyC2;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Resource;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
PortletResponse;Api Resource;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
PortletResponse;Api Resource;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Resource;encodeURL1;TRUE;Method encodeURL(String): Returns a String representing the encoded URL
PortletResponse;Api Resource;encodeURL2;TRUE;Method encodeURL(String): Throws IllegalArgumentException if the input string is not an absolute URL and does not start with at "/" character
PortletResponse;Api Resource;getNamespace1;TRUE;Method getNamespace(): Returns a String containing the namespace value
PortletResponse;Api Resource;getNamespace2;FALSE;Method getNamespace(): The returned namespace is constant for the lifetime of the portlet window
PortletResponse;Api Resource;createElement1;TRUE;Method createElement(String): Returns an org.w3c.dom.Element object for the specified tag name
PortletResponse;Api Resource;createElement2;TRUE;Method createElement(String): The returned Element has nodeName set to the the specified tag name 
PortletResponse;Api Resource;createElement3;TRUE;Method createElement(String): The returned Element has localName set to null
PortletResponse;Api Resource;createElement4;TRUE;Method createElement(String): The returned Element has prefix set to null
PortletResponse;Api Resource;createElement5;TRUE;Method createElement(String): The returned Element has namespaceURI set to null
PortletResponse;Api Resource;createElement6;TRUE;Method createElement(String): Throws org.w3c.dom.DOMException - INVALID_CHARACTER_ERR if the specified name contains an illegal character. 
PortletResponse;Api Action;addPropertyA1;TRUE;Method addProperty(javax.servlet.http.Cookie): Adds the specified cookie property to the response
PortletResponse;Api Action;addPropertyA2;TRUE;Method addProperty(javax.servlet.http.Cookie): Throws IllegalArgumentException if the specified cookie is null
PortletResponse;Api Action;addPropertyB1;TRUE;Method addProperty(String, org.w3c.dom.Element): Adds an XML DOM Element to the response for the specified key
PortletResponse;Api Action;addPropertyB2;TRUE;Method addProperty(String, org.w3c.dom.Element): If a DOM Element for the specified key already exists, the new element is added in addition to the existing element
PortletResponse;Api Action;addPropertyB3;TRUE;Method addProperty(String, org.w3c.dom.Element): If the specified DOM Element value is null, the key is removed from the response
PortletResponse;Api Action;addPropertyB4;TRUE;Method addProperty(String, org.w3c.dom.Element): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Action;addPropertyC1;TRUE;Method addProperty(String, String): Adds a property value to an existing key to allow the key to have multiple values
PortletResponse;Api Action;addPropertyC2;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Action;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
PortletResponse;Api Action;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
PortletResponse;Api Action;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Action;encodeURL1;TRUE;Method encodeURL(String): Returns a String representing the encoded URL
PortletResponse;Api Action;encodeURL2;TRUE;Method encodeURL(String): Throws IllegalArgumentException if the input string is not an absolute URL and does not start with at "/" character
PortletResponse;Api Action;getNamespace1;TRUE;Method getNamespace(): Returns a String containing the namespace value
PortletResponse;Api Action;getNamespace2;FALSE;Method getNamespace(): The returned namespace is constant for the lifetime of the portlet window
PortletResponse;Api Action;createElement1;TRUE;Method createElement(String): Returns an org.w3c.dom.Element object for the specified tag name
PortletResponse;Api Action;createElement2;TRUE;Method createElement(String): The returned Element has nodeName set to the the specified tag name 
PortletResponse;Api Action;createElement3;TRUE;Method createElement(String): The returned Element has localName set to null
PortletResponse;Api Action;createElement4;TRUE;Method createElement(String): The returned Element has prefix set to null
PortletResponse;Api Action;createElement5;TRUE;Method createElement(String): The returned Element has namespaceURI set to null
PortletResponse;Api Action;createElement6;TRUE;Method createElement(String): Throws org.w3c.dom.DOMException - INVALID_CHARACTER_ERR if the specified name contains an illegal character. 
PortletResponse;Api Event;addPropertyA1;TRUE;Method addProperty(javax.servlet.http.Cookie): Adds the specified cookie property to the response
PortletResponse;Api Event;addPropertyA2;TRUE;Method addProperty(javax.servlet.http.Cookie): Throws IllegalArgumentException if the specified cookie is null
PortletResponse;Api Event;addPropertyB1;TRUE;Method addProperty(String, org.w3c.dom.Element): Adds an XML DOM Element to the response for the specified key
PortletResponse;Api Event;addPropertyB2;TRUE;Method addProperty(String, org.w3c.dom.Element): If a DOM Element for the specified key already exists, the new element is added in addition to the existing element
PortletResponse;Api Event;addPropertyB3;TRUE;Method addProperty(String, org.w3c.dom.Element): If the specified DOM Element value is null, the key is removed from the response
PortletResponse;Api Event;addPropertyB4;TRUE;Method addProperty(String, org.w3c.dom.Element): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Event;addPropertyC1;TRUE;Method addProperty(String, String): Adds a property value to an existing key to allow the key to have multiple values
PortletResponse;Api Event;addPropertyC2;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Event;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
PortletResponse;Api Event;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
PortletResponse;Api Event;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletResponse;Api Event;encodeURL1;TRUE;Method encodeURL(String): Returns a String representing the encoded URL
PortletResponse;Api Event;encodeURL2;TRUE;Method encodeURL(String): Throws IllegalArgumentException if the input string is not an absolute URL and does not start with at "/" character
PortletResponse;Api Event;getNamespace1;TRUE;Method getNamespace(): Returns a String containing the namespace value
PortletResponse;Api Event;getNamespace2;FALSE;Method getNamespace(): The returned namespace is constant for the lifetime of the portlet window
PortletResponse;Api Event;createElement1;TRUE;Method createElement(String): Returns an org.w3c.dom.Element object for the specified tag name
PortletResponse;Api Event;createElement2;TRUE;Method createElement(String): The returned Element has nodeName set to the the specified tag name 
PortletResponse;Api Event;createElement3;TRUE;Method createElement(String): The returned Element has localName set to null
PortletResponse;Api Event;createElement4;TRUE;Method createElement(String): The returned Element has prefix set to null
PortletResponse;Api Event;createElement5;TRUE;Method createElement(String): The returned Element has namespaceURI set to null
PortletResponse;Api Event;createElement6;TRUE;Method createElement(String): Throws org.w3c.dom.DOMException - INVALID_CHARACTER_ERR if the specified name contains an illegal character. 
StateAwareResponse;Api Event;setWindowState1;TRUE;Method setWindowState(WindowState): Sets the WindowState to the specified value
StateAwareResponse;Api Event;setWindowState2;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the portlet cannot switch to the specified WindowState
StateAwareResponse;Api Event;setWindowState3;TRUE;Method setWindowState(WindowState): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Event;setPortletMode1;TRUE;Method setPortletMode(PortletMode): Sets the PortletMode to the specified value
StateAwareResponse;Api Event;setPortletMode2;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the portlet cannot switch to the specified PortletMode
StateAwareResponse;Api Event;setPortletMode3;TRUE;Method setPortletMode(PortletMode): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Event;setRenderParameters1;TRUE;Method setRenderParameters(java.util.Map): Sets the render parameter map to the specified value
StateAwareResponse;Api Event;setRenderParameters2;TRUE;Method setRenderParameters(java.util.Map): Public render parameters can be set through the map
StateAwareResponse;Api Event;setRenderParameters3;TRUE;Method setRenderParameters(java.util.Map): Private render parameters can be set through the map
StateAwareResponse;Api Event;setRenderParameters4;TRUE;Method setRenderParameters(java.util.Map): Previously existing private render parameters not contained in the specified input map are removed
StateAwareResponse;Api Event;setRenderParameters5;TRUE;Method setRenderParameters(java.util.Map): Previously existing public render parameters not contained in the specified input map remain unchanged
StateAwareResponse;Api Event;setRenderParameters6;TRUE;Method setRenderParameters(java.util.Map): Parameters that are set are available in subsequent render requests
StateAwareResponse;Api Event;setRenderParameters7;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if the input map is null
StateAwareResponse;Api Event;setRenderParameters8;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is null
StateAwareResponse;Api Event;setRenderParameters9;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is the empty string ("") 
StateAwareResponse;Api Event;setRenderParameters10;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if the values array for any key is null 
StateAwareResponse;Api Event;setRenderParameters11;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if any element in any values array is null 
StateAwareResponse;Api Event;setRenderParameters12;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Event;setRenderParameterA1;TRUE;Method setRenderParameter(String, String): Sets the parameter value for the specified name
StateAwareResponse;Api Event;setRenderParameterA2;TRUE;Method setRenderParameter(String, String): A private parameter can be set
StateAwareResponse;Api Event;setRenderParameterA3;TRUE;Method setRenderParameter(String, String): A public parameter can be set
StateAwareResponse;Api Event;setRenderParameterA4;TRUE;Method setRenderParameter(String, String): All previously existing values for the specified name are removed
StateAwareResponse;Api Event;setRenderParameterA5;TRUE;Method setRenderParameter(String, String): If the value is null, all values for the specified name are removed
StateAwareResponse;Api Event;setRenderParameterA6;TRUE;Method setRenderParameter(String, String): Parameters that are set are available in subsequent render requests
StateAwareResponse;Api Event;setRenderParameterA7;TRUE;Method setRenderParameter(String, String): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Event;setRenderParameterA8;TRUE;Method setRenderParameter(String, String): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Event;setRenderParameterB1;TRUE;Method setRenderParameter(String, String[]): Sets the parameter values for the specified name.
StateAwareResponse;Api Event;setRenderParameterB2;TRUE;Method setRenderParameter(String, String[]): All existing values are removed
StateAwareResponse;Api Event;setRenderParameterB3;TRUE;Method setRenderParameter(String, String[]): Parameters that are set are available in subsequent render requests
StateAwareResponse;Api Event;setRenderParameterB4;TRUE;Method setRenderParameter(String, String[]): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Event;setRenderParameterB5;TRUE;Method setRenderParameter(String, String[]): Throws IllegalArgumentException if the values array is null
StateAwareResponse;Api Event;setRenderParameterB6;TRUE;Method setRenderParameter(String, String[]): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Event;setEventA1;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Publishes an event with the specified name and payload
StateAwareResponse;Api Event;setEventA2;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Event;setEventA3;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the value is not serializable
StateAwareResponse;Api Event;setEventA4;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the value does not have a valid JAXB binding
StateAwareResponse;Api Event;setEventA5;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the value object type is not as specified in the deployment descriptor
StateAwareResponse;Api Event;setEventB1;TRUE;Method setEvent(String, java.io.Serializable): Publishes an event with the specified name and payload
StateAwareResponse;Api Event;setEventB2;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Event;setEventB3;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the value is not serializable
StateAwareResponse;Api Event;setEventB4;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the value does not have a valid JAXB binding
StateAwareResponse;Api Event;setEventB5;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the value object type is not as specified in the deployment descriptor
StateAwareResponse;Api Event;getRenderParameterMap1;TRUE;Method getRenderParameterMap(): Returns a map of the render parameters currently set on the response
StateAwareResponse;Api Event;getRenderParameterMap2;TRUE;Method getRenderParameterMap(): The returned map contains public render parameters
StateAwareResponse;Api Event;getRenderParameterMap3;TRUE;Method getRenderParameterMap(): The returned map contains private render parameters
StateAwareResponse;Api Event;getRenderParameterMap4;TRUE;Method getRenderParameterMap(): An empty map is returned if no parameters have been set 
StateAwareResponse;Api Event;getPortletMode1;TRUE;Method getPortletMode(): Returns the current PortletMode for the portlet
StateAwareResponse;Api Event;getPortletMode2;TRUE;Method getPortletMode(): Returns null if no PortletMode has been set
StateAwareResponse;Api Event;getWindowState1;TRUE;Method getWindowState(): Returns the current WindowState for the portlet
StateAwareResponse;Api Event;getWindowState2;TRUE;Method getWindowState(): Returns null if no WindowState has been set
StateAwareResponse;Api Event;removePublicRenderParameter1;TRUE;Method removePublicRenderParameter(String): Removes the specified public render parameter
StateAwareResponse;Api Event;removePublicRenderParameter2;TRUE;Method removePublicRenderParameter(String): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Action;setWindowState1;TRUE;Method setWindowState(WindowState): Sets the WindowState to the specified value
StateAwareResponse;Api Action;setWindowState2;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the portlet cannot switch to the specified WindowState
StateAwareResponse;Api Action;setWindowState3;TRUE;Method setWindowState(WindowState): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Action;setPortletMode1;TRUE;Method setPortletMode(PortletMode): Sets the PortletMode to the specified value
StateAwareResponse;Api Action;setPortletMode2;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the portlet cannot switch to the specified PortletMode
StateAwareResponse;Api Action;setPortletMode3;TRUE;Method setPortletMode(PortletMode): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Action;setRenderParameters1;TRUE;Method setRenderParameters(java.util.Map): Sets the render parameter map to the specified value
StateAwareResponse;Api Action;setRenderParameters2;TRUE;Method setRenderParameters(java.util.Map): Public render parameters can be set through the map
StateAwareResponse;Api Action;setRenderParameters3;TRUE;Method setRenderParameters(java.util.Map): Private render parameters can be set through the map
StateAwareResponse;Api Action;setRenderParameters4;TRUE;Method setRenderParameters(java.util.Map): Previously existing private render parameters not contained in the specified input map are removed
StateAwareResponse;Api Action;setRenderParameters5;TRUE;Method setRenderParameters(java.util.Map): Previously existing public render parameters not contained in the specified input map remain unchanged
StateAwareResponse;Api Action;setRenderParameters6;TRUE;Method setRenderParameters(java.util.Map): Parameters that are set are available in subsequent render requests
StateAwareResponse;Api Action;setRenderParameters7;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if the input map is null
StateAwareResponse;Api Action;setRenderParameters8;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is null
StateAwareResponse;Api Action;setRenderParameters9;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is the empty string ("") 
StateAwareResponse;Api Action;setRenderParameters10;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if the values array for any key is null 
StateAwareResponse;Api Action;setRenderParameters11;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalArgumentException if any element in any values array is null 
StateAwareResponse;Api Action;setRenderParameters12;TRUE;Method setRenderParameters(java.util.Map): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Action;setRenderParameterA1;TRUE;Method setRenderParameter(String, String): Sets the parameter value for the specified name
StateAwareResponse;Api Action;setRenderParameterA2;TRUE;Method setRenderParameter(String, String): A private parameter can be set
StateAwareResponse;Api Action;setRenderParameterA3;TRUE;Method setRenderParameter(String, String): A public parameter can be set
StateAwareResponse;Api Action;setRenderParameterA4;TRUE;Method setRenderParameter(String, String): All previously existing values for the specified name are removed
StateAwareResponse;Api Action;setRenderParameterA5;TRUE;Method setRenderParameter(String, String): If the value is null, all values for the specified name are removed
StateAwareResponse;Api Action;setRenderParameterA6;TRUE;Method setRenderParameter(String, String): Parameters that are set are available in subsequent render requests
StateAwareResponse;Api Action;setRenderParameterA7;TRUE;Method setRenderParameter(String, String): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Action;setRenderParameterA8;TRUE;Method setRenderParameter(String, String): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Action;setRenderParameterB1;TRUE;Method setRenderParameter(String, String[]): Sets the parameter values for the specified name.
StateAwareResponse;Api Action;setRenderParameterB2;TRUE;Method setRenderParameter(String, String[]): All existing values are removed
StateAwareResponse;Api Action;setRenderParameterB3;TRUE;Method setRenderParameter(String, String[]): Parameters that are set are available in subsequent render requests
StateAwareResponse;Api Action;setRenderParameterB4;TRUE;Method setRenderParameter(String, String[]): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Action;setRenderParameterB5;TRUE;Method setRenderParameter(String, String[]): Throws IllegalArgumentException if the values array is null
StateAwareResponse;Api Action;setRenderParameterB6;TRUE;Method setRenderParameter(String, String[]): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
StateAwareResponse;Api Action;setEventA1;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Publishes an event with the specified name and payload
StateAwareResponse;Api Action;setEventA2;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Action;setEventA3;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the value is not serializable
StateAwareResponse;Api Action;setEventA4;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the value does not have a valid JAXB binding
StateAwareResponse;Api Action;setEventA5;TRUE;Method setEvent(javax.xml.namespace.QName, java.io.Serializable): Throws IllegalArgumentException if the value object type is not as specified in the deployment descriptor
StateAwareResponse;Api Action;setEventB1;TRUE;Method setEvent(String, java.io.Serializable): Publishes an event with the specified name and payload
StateAwareResponse;Api Action;setEventB2;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the name is null
StateAwareResponse;Api Action;setEventB3;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the value is not serializable
StateAwareResponse;Api Action;setEventB4;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the value does not have a valid JAXB binding
StateAwareResponse;Api Action;setEventB5;TRUE;Method setEvent(String, java.io.Serializable): Throws IllegalArgumentException if the value object type is not as specified in the deployment descriptor
StateAwareResponse;Api Action;getRenderParameterMap1;TRUE;Method getRenderParameterMap(): Returns a map of the render parameters currently set on the response
StateAwareResponse;Api Action;getRenderParameterMap2;TRUE;Method getRenderParameterMap(): The returned map contains public render parameters
StateAwareResponse;Api Action;getRenderParameterMap3;TRUE;Method getRenderParameterMap(): The returned map contains private render parameters
StateAwareResponse;Api Action;getRenderParameterMap4;TRUE;Method getRenderParameterMap(): An empty map is returned if no parameters have been set 
StateAwareResponse;Api Action;getPortletMode1;TRUE;Method getPortletMode(): Returns the current PortletMode for the portlet
StateAwareResponse;Api Action;getPortletMode2;TRUE;Method getPortletMode(): Returns null if no PortletMode has been set
StateAwareResponse;Api Action;getWindowState1;TRUE;Method getWindowState(): Returns the current WindowState for the portlet
StateAwareResponse;Api Action;getWindowState2;TRUE;Method getWindowState(): Returns null if no WindowState has been set
StateAwareResponse;Api Action;removePublicRenderParameter1;TRUE;Method removePublicRenderParameter(String): Removes the specified public render parameter
StateAwareResponse;Api Action;removePublicRenderParameter2;TRUE;Method removePublicRenderParameter(String): Throws IllegalArgumentException if the name is null
ActionResponse;Api Action;sendRedirectA1;TRUE;Method sendRedirect(String): Allows a redirect response to be sent to the client
ActionResponse;Api Action;sendRedirectA2;TRUE;Method sendRedirect(String): Throws IllegalArgumentException if a relative path URL is specified
ActionResponse;Api Action;sendRedirectA3;TRUE;Method sendRedirect(String): Throws IllegalStateException if setPortletMode has been called before this method 
ActionResponse;Api Action;sendRedirectA4;TRUE;Method sendRedirect(String): Throws IllegalStateException if setWindowState has been called before this method 
ActionResponse;Api Action;sendRedirectA5;TRUE;Method sendRedirect(String): Throws IllegalStateException if setRenderParameter has been called before this method 
ActionResponse;Api Action;sendRedirectA6;TRUE;Method sendRedirect(String): Throws IllegalStateException if setRenderParameters has been called before this method 
ActionResponse;Api Action;sendRedirectA7;TRUE;Method sendRedirect(String): Throws IllegalStateException if removePublicRenderParameter has been called before this method
ActionResponse;Api Action;sendRedirectA8;FALSE;Method sendRedirect(): Throws IOException if an I/O error occurs
ActionResponse;Api Action;sendRedirectB1;TRUE;Method sendRedirect(String, String): Allows a redirect response to be sent to the client
ActionResponse;Api Action;sendRedirectB2;TRUE;Method sendRedirect(String, String): Encodes a render URL as a parameter under the specified name on the redirect URL
ActionResponse;Api Action;sendRedirectB3;TRUE;Method sendRedirect(String, String): The encoded render URL contains the currently set PortletMode
ActionResponse;Api Action;sendRedirectB4;TRUE;Method sendRedirect(String, String): The encoded render URL contains the currently set WindowState
ActionResponse;Api Action;sendRedirectB5;TRUE;Method sendRedirect(String, String): The encoded render URL contains the currently set render parameters
ActionResponse;Api Action;sendRedirectB6;TRUE;Method sendRedirect(String, String): Throws IllegalArgumentException if a relative path URL is specified
ActionResponse;Api Action;sendRedirectB7;TRUE;Method sendRedirect(String, String): Throws IllegalStateException if setPortletMode has been called before this method 
ActionResponse;Api Action;sendRedirectB8;TRUE;Method sendRedirect(String, String): Throws IllegalStateException if setWindowState has been called before this method 
ActionResponse;Api Action;sendRedirectB9;TRUE;Method sendRedirect(String, String): Throws IllegalStateException if setRenderParameter has been called before this method 
ActionResponse;Api Action;sendRedirectB10;TRUE;Method sendRedirect(String, String): Throws IllegalStateException if setRenderParameters has been called before this method 
ActionResponse;Api Action;sendRedirectB11;TRUE;Method sendRedirect(String, String): Throws IllegalStateException if removePublicRenderParameter has been called before this method
ActionResponse;Api Action;sendRedirectB12;FALSE;Method sendRedirect(String, String): Throws IOException if an I/O error occurs
EventResponse;Api Event;setRenderParameters1;TRUE;Method setRenderParameters(EventRequest): Copies all render parameters set on the EventRequest to the EventResponse
EventResponse;Api Event;setRenderParameters2;TRUE;Method setRenderParameters(EventRequest): Throws IllegalArgumentException if the input EventRequest parameter is null
MimeResponse;Api Render;fieldEXPIRATION_CACHE ;TRUE;Has String field EXPIRATION_CACHE with value of "portlet.expiration-cache"
MimeResponse;Api Render;fieldCACHE_SCOPE ;TRUE;Has String field CACHE_SCOPE with value of "portlet.cache-scope"
MimeResponse;Api Render;fieldPUBLIC_SCOPE ;TRUE;Has String field PUBLIC_SCOPE with value of "portlet.public-scope"
MimeResponse;Api Render;fieldPRIVATE_SCOPE ;TRUE;Has String field PRIVATE_SCOPE with value of "portlet.private-scope"
MimeResponse;Api Render;fieldETAG ;TRUE;Has String field ETAG with value of "portlet.ETag"
MimeResponse;Api Render;fieldUSE_CACHED_CONTENT ;TRUE;Has String field USE_CACHED_CONTENT with value of "portlet.use-cached-content"
MimeResponse;Api Render;fieldNAMESPACED_RESPONSE;TRUE;Has String field NAMESPACED_RESPONSE with value of "X-JAVAX-PORTLET-NAMESPACED-RESPONSE"
MimeResponse;Api Render;fieldMARKUP_HEAD_ELEMENT;TRUE;Has String field MARKUP_HEAD_ELEMENT with value of "javax.portlet.markup.head.element"
MimeResponse;Api Render;getContentType1;TRUE;Method getContentType(): Returns a String containing the MIME type that can be used with the response
MimeResponse;Api Render;getContentType2;TRUE;Method getContentType(): Returns null if no content type is set
MimeResponse;Api Render;setContentType1;TRUE;Method setContentType(String): Sets the MIME type for the response
MimeResponse;Api Render;setContentType2;FALSE;Method setContentType(String): Has no effect if called after the getWriter method has been called
MimeResponse;Api Render;setContentType3;FALSE;Method setContentType(String): Has no effect if called after the getPortletOutputStream method has been called
MimeResponse;Api Render;setContentType4;TRUE;Method setContentType(String): Throws IllegalArgumentException if the specified MIME type is invalid
MimeResponse;Api Render;getCharacterEncoding;TRUE;Method getCharacterEncoding(): Returns a String containing the name of the charset used for the response body
MimeResponse;Api Render;getWriter1;TRUE;Method getWriter(): Returns a PrintWriter object
MimeResponse;Api Render;getWriter2;TRUE;Method getWriter(): Throws IllegalStateException if called after the getPortletOutputStream method has been called
MimeResponse;Api Render;getWriter3;FALSE;Method getWriter(): Throws IOException if an I/O error occurs
MimeResponse;Api Render;getLocale;TRUE;Method getLocale(): Returns an java.util.Locale representing the locale assigned to the response
MimeResponse;Api Render;setBufferSize1;TRUE;Method setBufferSize(int): Sets the preferred buffer size for the response body
MimeResponse;Api Render;setBufferSize2;TRUE;Method setBufferSize(int): Throws IllegalStateException if called after content has been written
MimeResponse;Api Render;getBufferSize1;TRUE;Method getBufferSize(): Returns an int designating the actual buffer size used for the response
MimeResponse;Api Render;getBufferSize2;TRUE;Method getBufferSize(): Returns null if buffering is not used
MimeResponse;Api Render;flushBuffer1;TRUE;Method flushBuffer(): Returns void and flushes buffer to OutputStream
MimeResponse;Api Render;flushBuffer2;FALSE;Method flushBuffer(): Throws IOException if an I/O error occurs
MimeResponse;Api Render;resetBuffer1;TRUE;Method resetBuffer(): Returns void and clears and data and properties from the buffer
MimeResponse;Api Render;resetBuffer2;TRUE;Method resetBuffer(): Throws IllegalStateException if called after the response has been committed
MimeResponse;Api Render;isCommitted1;TRUE;Method isCommitted(): Returns true if the response has been committed
MimeResponse;Api Render;isCommitted2;TRUE;Method isCommitted(): Returns false if the response has not been committed
MimeResponse;Api Render;reset1;TRUE;Method reset(): Returns void and clears and data and properties from the buffer
MimeResponse;Api Render;reset2;TRUE;Method reset(): Throws IllegalStateException if called after the response has been committed
MimeResponse;Api Render;getPortletOutputStream1;TRUE;Method getPortletOutputStream(): Returns a PortletOutputStream object
MimeResponse;Api Render;getPortletOutputStream2;TRUE;Method getPortletOutputStream(): Throws IllegalStateException if called after the getWriter method has been called
MimeResponse;Api Render;getPortletOutputStream3;FALSE;Method getPortletOutputStream(): Throws IOException if an I/O error occurs
MimeResponse;Api Render;createRenderURL;TRUE;Method createRenderURL(): Returns a PortletURL object representing a render URL targeting the portlet
MimeResponse;Api Render;createActionURL;TRUE;Method createActionURL(): Returns a PortletURL object representing an action URL targeting the portlet
MimeResponse;Api Render;createResourceURL;TRUE;Method createResourceURL(): Returns a ResourceURL object targeting the portlet
MimeResponse;Api Render;getCacheControl;TRUE;Method getCacheControl(): Returns a CacheControl object
MimeResponse;Api Resource;fieldEXPIRATION_CACHE ;TRUE;Has String field EXPIRATION_CACHE with value of "portlet.expiration-cache"
MimeResponse;Api Resource;fieldCACHE_SCOPE ;TRUE;Has String field CACHE_SCOPE with value of "portlet.cache-scope"
MimeResponse;Api Resource;fieldPUBLIC_SCOPE ;TRUE;Has String field PUBLIC_SCOPE with value of "portlet.public-scope"
MimeResponse;Api Resource;fieldPRIVATE_SCOPE ;TRUE;Has String field PRIVATE_SCOPE with value of "portlet.private-scope"
MimeResponse;Api Resource;fieldETAG ;TRUE;Has String field ETAG with value of "portlet.ETag"
MimeResponse;Api Resource;fieldUSE_CACHED_CONTENT ;TRUE;Has String field USE_CACHED_CONTENT with value of "portlet.use-cached-content"
MimeResponse;Api Resource;fieldNAMESPACED_RESPONSE;TRUE;Has String field NAMESPACED_RESPONSE with value of "X-JAVAX-PORTLET-NAMESPACED-RESPONSE"
MimeResponse;Api Resource;fieldMARKUP_HEAD_ELEMENT;TRUE;Has String field MARKUP_HEAD_ELEMENT with value of "javax.portlet.markup.head.element"
MimeResponse;Api Resource;getContentType1;TRUE;Method getContentType(): Returns a String containing the MIME type that can be used with the response
MimeResponse;Api Resource;getContentType2;TRUE;Method getContentType(): Returns null if no content type is set
MimeResponse;Api Resource;setContentType1;TRUE;Method setContentType(String): Sets the MIME type for the response
MimeResponse;Api Resource;setContentType2;FALSE;Method setContentType(String): Has no effect if called after the getWriter method has been called
MimeResponse;Api Resource;setContentType3;FALSE;Method setContentType(String): Has no effect if called after the getPortletOutputStream method has been called
MimeResponse;Api Resource;setContentType4;TRUE;Method setContentType(String): Throws IllegalArgumentException if the specified MIME type is invalid
MimeResponse;Api Resource;getCharacterEncoding;TRUE;Method getCharacterEncoding(): Returns a String containing the name of the charset used for the response body
MimeResponse;Api Resource;getWriter1;TRUE;Method getWriter(): Returns a PrintWriter object
MimeResponse;Api Resource;getWriter2;TRUE;Method getWriter(): Throws IllegalStateException if called after the getPortletOutputStream method has been called
MimeResponse;Api Resource;getWriter3;FALSE;Method getWriter(): Throws IOException if an I/O error occurs
MimeResponse;Api Resource;getLocale;TRUE;Method getLocale(): Returns an java.util.Locale representing the locale assigned to the response
MimeResponse;Api Resource;setBufferSize1;TRUE;Method setBufferSize(int): Sets the preferred buffer size for the response body
MimeResponse;Api Resource;setBufferSize2;TRUE;Method setBufferSize(int): Throws IllegalStateException if called after content has been written
MimeResponse;Api Resource;getBufferSize1;TRUE;Method getBufferSize(): Returns an int designating the actual buffer size used for the response
MimeResponse;Api Resource;getBufferSize2;TRUE;Method getBufferSize(): Returns null if buffering is not used
MimeResponse;Api Resource;flushBuffer1;TRUE;Method flushBuffer(): Returns void and flushes buffer to OutputStream
MimeResponse;Api Resource;flushBuffer2;FALSE;Method flushBuffer(): Throws IOException if an I/O error occurs
MimeResponse;Api Resource;resetBuffer1;TRUE;Method resetBuffer(): Returns void and clears and data and properties from the buffer
MimeResponse;Api Resource;resetBuffer2;TRUE;Method resetBuffer(): Throws IllegalStateException if called after the response has been committed
MimeResponse;Api Resource;isCommitted1;TRUE;Method isCommitted(): Returns true if the response has been committed
MimeResponse;Api Resource;isCommitted2;TRUE;Method isCommitted(): Returns false if the response has not been committed
MimeResponse;Api Resource;reset1;TRUE;Method reset(): Returns void and clears and data and properties from the buffer
MimeResponse;Api Resource;reset2;TRUE;Method reset(): Throws IllegalStateException if called after the response has been committed
MimeResponse;Api Resource;getPortletOutputStream1;TRUE;Method getPortletOutputStream(): Returns a PortletOutputStream object
MimeResponse;Api Resource;getPortletOutputStream2;TRUE;Method getPortletOutputStream(): Throws IllegalStateException if called after the getWriter method has been called
MimeResponse;Api Resource;getPortletOutputStream3;FALSE;Method getPortletOutputStream(): Throws IOException if an I/O error occurs
MimeResponse;Api Resource;createRenderURL;TRUE;Method createRenderURL(): Returns a PortletURL object representing a render URL targeting the portlet
MimeResponse;Api Resource;createActionURL;TRUE;Method createActionURL(): Returns a PortletURL object representing an action URL targeting the portlet
MimeResponse;Api Resource;createResourceURL;TRUE;Method createResourceURL(): Returns a ResourceURL object targeting the portlet
MimeResponse;Api Resource;getCacheControl;TRUE;Method getCacheControl(): Returns a CacheControl object
RenderResponse;Api Render;setTitle2;TRUE;Method setTitle(String): Sets the portlet title to the specified value
RenderResponse;Api Render;setNextPossiblePortletModes2;TRUE;Method setNextPossiblePortletModes(java.util.Collection): Sets the next possible portlet modes to the specified value
RenderResponse;Api Render;setContentType1;TRUE;Method setContentType(String): The portlet container will ignore any character encoding specified as part of the content type for render calls
RenderResponse;Api Render;setContentType2;TRUE;Method setContentType(String): Throws IllegalArgumentException if the content type is not valid
ResourceResponse;Api Resource;fieldHTTP_STATUS_CODE ;TRUE;Has String field HTTP_STATUS_CODE with value of "portlet.http-status-code"
ResourceResponse;Api Resource;setLocale1;TRUE;Method setLocale(Locale): Sets the locale of the response
ResourceResponse;Api Resource;setLocale2;FALSE;Method setLocale(Locale): Has no effect if called after the getWriter method has been called
ResourceResponse;Api Resource;setLocale3;FALSE;Method setLocale(Locale): Has no effect if called after the getPortletOutputStream method has been called
ResourceResponse;Api Resource;setLocale4;TRUE;Method setLocale(Locale): Throws IllegalArgumentException if the Locale parameter is null
ResourceResponse;Api Resource;setCharacterEncoding1;TRUE;Method setCharacterEncoding(String): Sets the character encoding of the response
ResourceResponse;Api Resource;setCharacterEncoding2;FALSE;Method setCharacterEncoding(String): Has no effect if called after the getWriter method has been called
ResourceResponse;Api Resource;setCharacterEncoding3;FALSE;Method setCharacterEncoding(String): Has no effect if called after the getPortletOutputStream method has been called
ResourceResponse;Api Resource;setCharacterEncoding4;TRUE;Method setCharacterEncoding(String): Throws IllegalArgumentException if the Locale parameter is null
ResourceResponse;Api Resource;setContentLength1;TRUE;Method setContentLength(int): Sets the length of the content body
ResourceResponse;Api Resource;setContentLength2;FALSE;Method setContentLength(int): Has no effect if called after the getWriter method has been called
ResourceResponse;Api Resource;setContentLength3;FALSE;Method setContentLength(int): Has no effect if called after the getPortletOutputStream method has been called
ResourceResponse;Api Resource;createRenderURL2;TRUE;Method createRenderURL(): Throws IllegalStateException if the cacheability level for the resource URL triggering the serveResource call is not PAGE
ResourceResponse;Api Resource;createActionURL2;TRUE;Method createActionURL(): Throws IllegalStateException if the cacheability level for the resource URL triggering the serveResource call is not PAGE
ResourceResponse;Api Resource;createResourceURL2;TRUE;Method createResourceURL(): Throws IllegalStateException if the cacheability level for the resource URL triggering the serveResource call is not PAGE
URL Tests;;;;
BaseURL;Api Render Renurl;setParameterA1;TRUE;Method setParameter(String, String): Sets the parameter value for the specified name
BaseURL;Api Render Renurl;setParameterA2;TRUE;Method setParameter(String, String): For a render URL, a private parameter can be set
BaseURL;Api Render Renurl;setParameterA3;TRUE;Method setParameter(String, String): For a render URL, a public parameter can be set
BaseURL;Api Render Renurl;setParameterA4;TRUE;Method setParameter(String, String): For an action URL, an action parameter can be set
BaseURL;Api Render Renurl;setParameterA5;TRUE;Method setParameter(String, String): For a resource URL, a resource parameter can be set
BaseURL;Api Render Renurl;setParameterA6;TRUE;Method setParameter(String, String): All previously existing values for the specified key are removed
BaseURL;Api Render Renurl;setParameterA7;TRUE;Method setParameter(String, String): If the value is null, all values for the specified key are removed
BaseURL;Api Render Renurl;setParameterA8;TRUE;Method setParameter(String, String): Throws IllegalArgumentException if the name is null
BaseURL;Api Render Renurl;setParameterB1;TRUE;Method setParameter(String, String[]): Sets the parameter value array for the specified name
BaseURL;Api Render Renurl;setParameterB2;TRUE;Method setParameter(String, String[]): For a render URL, a private parameter can be set
BaseURL;Api Render Renurl;setParameterB3;TRUE;Method setParameter(String, String[]): For a render URL, a public parameter can be set
BaseURL;Api Render Renurl;setParameterB4;TRUE;Method setParameter(String, String[]): For an action URL, an action parameter can be set
BaseURL;Api Render Renurl;setParameterB5;TRUE;Method setParameter(String, String[]): For a resource URL, a resource parameter can be set
BaseURL;Api Render Renurl;setParameterB6;TRUE;Method setParameter(String, String[]): All previously existing values for the specified key are removed
BaseURL;Api Render Renurl;setParameterB7;TRUE;Method setParameter(String, String[]): If the value is null, all values for the specified key are removed
BaseURL;Api Render Renurl;setParameterB8;TRUE;Method setParameter(String, String[]): Throws IllegalArgumentException if the name is null
BaseURL;Api Render Renurl;setParameters1;TRUE;Method setParameters(java.util.Map): Sets the parameter map to the specified value
BaseURL;Api Render Renurl;setParameters2;TRUE;Method setParameters(java.util.Map): For a render URL, public parameters can be set through the map
BaseURL;Api Render Renurl;setParameters3;TRUE;Method setParameters(java.util.Map): For a render URL, private parameters can be set through the map
BaseURL;Api Render Renurl;setParameters4;TRUE;Method setParameters(java.util.Map): For an action URL, action parameters can be set through the map
BaseURL;Api Render Renurl;setParameters5;TRUE;Method setParameters(java.util.Map): For a resource URL, resource parameters can be set through the map
BaseURL;Api Render Renurl;setParameters6;TRUE;Method setParameters(java.util.Map): Previously existing private, action, or resource parameters not contained in the specified input map are removed
BaseURL;Api Render Renurl;setParameters7;TRUE;Method setParameters(java.util.Map): Previously existing public parameters not contained in the specified input map remain unchanged
BaseURL;Api Render Renurl;setParameters8;TRUE;Method setParameters(java.util.Map): Parameters that are set are available in requests initiated through the URL
BaseURL;Api Render Renurl;setParameters9;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if the input map is null
BaseURL;Api Render Renurl;setParameters10;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is null
BaseURL;Api Render Renurl;setParameters11;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is the empty string ("") 
BaseURL;Api Render Renurl;setParameters12;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if the values array for any key is null 
BaseURL;Api Render Renurl;setParameters13;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any element in any values array is null 
BaseURL;Api Render Renurl;setParameters14;TRUE;Method setParameters(java.util.Map): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
BaseURL;Api Render Renurl;setSecure2;TRUE;Method setSecure(boolean): If the input parameter is true, the resulting URL uses a secure connection (HTTPS)
BaseURL;Api Render Renurl;setSecure3;TRUE;Method setSecure(boolean): If the input parameter is false, the resulting URL can use either a secure or non-secure connection
BaseURL;Api Render Renurl;setSecure4;TRUE;Method setSecure(boolean): Throws a PortletSecurityException if the run-time environment does not support the setting
BaseURL;Api Render Renurl;toString;TRUE;Method toString(): Returns a String containing the portlet URL representation to be included in the markup
BaseURL;Api Render Renurl;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
BaseURL;Api Render Renurl;getParameterMap2;TRUE;Method getParameterMap(): For a render URL, the returned map contains all public and private parameters for the request
BaseURL;Api Render Renurl;getParameterMap3;TRUE;Method getParameterMap(): For an action URL, the returned map contains all action parameters for the request
BaseURL;Api Render Renurl;getParameterMap4;TRUE;Method getParameterMap(): For a resource URL, the returned map contains all resource parameters for the request
BaseURL;Api Render Renurl;getParameterMap5;TRUE;Method getParameterMap(): For a resource URL, the returned map does not contain any render parameters for the request
BaseURL;Api Render Renurl;getParameterMap6;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
BaseURL;Api Render Renurl;writeA1;TRUE;Method write(): Writes the URL to the output stream through the provided Writer
BaseURL;Api Render Renurl;writeA2;TRUE;Method write(): The written URL is XML escaped (although it may be a token rather than a valid URL)
BaseURL;Api Render Renurl;writeA3;FALSE;Method write(): Throws IOException if an I/O error occurs
BaseURL;Api Render Renurl;writeB1;TRUE;Method write(): Writes the URL to the output stream through the provided Writer
BaseURL;Api Render Renurl;writeB2;TRUE;Method write(): If the escapeXML parameter is true, the written URL is XML escaped (although it may be a token rather than a valid URL)
BaseURL;Api Render Renurl;writeB3;TRUE;Method write(): If the escapeXML parameter is false, no excaping is performed
BaseURL;Api Render Renurl;writeB4;FALSE;Method write(): Throws IOException if an I/O error occurs
BaseURL;Api Render Renurl;addProperty1;TRUE;Method addProperty(String, String): Adds a property value to an existing key
BaseURL;Api Render Renurl;addProperty2;TRUE;Method addProperty(String, String): Existing property values for the key are retained
BaseURL;Api Render Renurl;addProperty3;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
BaseURL;Api Render Renurl;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
BaseURL;Api Render Renurl;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
BaseURL;Api Render Renurl;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
BaseURL;Api Render Acturl;setParameterA1;TRUE;Method setParameter(String, String): Sets the parameter value for the specified name
BaseURL;Api Render Acturl;setParameterA2;TRUE;Method setParameter(String, String): For a render URL, a private parameter can be set
BaseURL;Api Render Acturl;setParameterA3;TRUE;Method setParameter(String, String): For a render URL, a public parameter can be set
BaseURL;Api Render Acturl;setParameterA4;TRUE;Method setParameter(String, String): For an action URL, an action parameter can be set
BaseURL;Api Render Acturl;setParameterA5;TRUE;Method setParameter(String, String): For a resource URL, a resource parameter can be set
BaseURL;Api Render Acturl;setParameterA6;TRUE;Method setParameter(String, String): All previously existing values for the specified key are removed
BaseURL;Api Render Acturl;setParameterA7;TRUE;Method setParameter(String, String): If the value is null, all values for the specified key are removed
BaseURL;Api Render Acturl;setParameterA8;TRUE;Method setParameter(String, String): Throws IllegalArgumentException if the name is null
BaseURL;Api Render Acturl;setParameterB1;TRUE;Method setParameter(String, String[]): Sets the parameter value array for the specified name
BaseURL;Api Render Acturl;setParameterB2;TRUE;Method setParameter(String, String[]): For a render URL, a private parameter can be set
BaseURL;Api Render Acturl;setParameterB3;TRUE;Method setParameter(String, String[]): For a render URL, a public parameter can be set
BaseURL;Api Render Acturl;setParameterB4;TRUE;Method setParameter(String, String[]): For an action URL, an action parameter can be set
BaseURL;Api Render Acturl;setParameterB5;TRUE;Method setParameter(String, String[]): For a resource URL, a resource parameter can be set
BaseURL;Api Render Acturl;setParameterB6;TRUE;Method setParameter(String, String[]): All previously existing values for the specified key are removed
BaseURL;Api Render Acturl;setParameterB7;TRUE;Method setParameter(String, String[]): If the value is null, all values for the specified key are removed
BaseURL;Api Render Acturl;setParameterB8;TRUE;Method setParameter(String, String[]): Throws IllegalArgumentException if the name is null
BaseURL;Api Render Acturl;setParameters1;TRUE;Method setParameters(java.util.Map): Sets the parameter map to the specified value
BaseURL;Api Render Acturl;setParameters2;TRUE;Method setParameters(java.util.Map): For a render URL, public parameters can be set through the map
BaseURL;Api Render Acturl;setParameters3;TRUE;Method setParameters(java.util.Map): For a render URL, private parameters can be set through the map
BaseURL;Api Render Acturl;setParameters4;TRUE;Method setParameters(java.util.Map): For an action URL, action parameters can be set through the map
BaseURL;Api Render Acturl;setParameters5;TRUE;Method setParameters(java.util.Map): For a resource URL, resource parameters can be set through the map
BaseURL;Api Render Acturl;setParameters6;TRUE;Method setParameters(java.util.Map): Previously existing private, action, or resource parameters not contained in the specified input map are removed
BaseURL;Api Render Acturl;setParameters7;TRUE;Method setParameters(java.util.Map): Previously existing public parameters not contained in the specified input map remain unchanged
BaseURL;Api Render Acturl;setParameters8;TRUE;Method setParameters(java.util.Map): Parameters that are set are available in requests initiated through the URL
BaseURL;Api Render Acturl;setParameters9;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if the input map is null
BaseURL;Api Render Acturl;setParameters10;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is null
BaseURL;Api Render Acturl;setParameters11;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is the empty string ("") 
BaseURL;Api Render Acturl;setParameters12;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if the values array for any key is null 
BaseURL;Api Render Acturl;setParameters13;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any element in any values array is null 
BaseURL;Api Render Acturl;setParameters14;TRUE;Method setParameters(java.util.Map): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
BaseURL;Api Render Acturl;setSecure2;TRUE;Method setSecure(boolean): If the input parameter is true, the resulting URL uses a secure connection (HTTPS)
BaseURL;Api Render Acturl;setSecure3;TRUE;Method setSecure(boolean): If the input parameter is false, the resulting URL can use either a secure or non-secure connection
BaseURL;Api Render Acturl;setSecure4;TRUE;Method setSecure(boolean): Throws a PortletSecurityException if the run-time environment does not support the setting
BaseURL;Api Render Acturl;toString;TRUE;Method toString(): Returns a String containing the portlet URL representation to be included in the markup
BaseURL;Api Render Acturl;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
BaseURL;Api Render Acturl;getParameterMap2;TRUE;Method getParameterMap(): For a render URL, the returned map contains all public and private parameters for the request
BaseURL;Api Render Acturl;getParameterMap3;TRUE;Method getParameterMap(): For an action URL, the returned map contains all action parameters for the request
BaseURL;Api Render Acturl;getParameterMap4;TRUE;Method getParameterMap(): For a resource URL, the returned map contains all resource parameters for the request
BaseURL;Api Render Acturl;getParameterMap5;TRUE;Method getParameterMap(): For a resource URL, the returned map does not contain any render parameters for the request
BaseURL;Api Render Acturl;getParameterMap6;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
BaseURL;Api Render Acturl;writeA1;TRUE;Method write(): Writes the URL to the output stream through the provided Writer
BaseURL;Api Render Acturl;writeA2;TRUE;Method write(): The written URL is XML escaped (although it may be a token rather than a valid URL)
BaseURL;Api Render Acturl;writeA3;FALSE;Method write(): Throws IOException if an I/O error occurs
BaseURL;Api Render Acturl;writeB1;TRUE;Method write(): Writes the URL to the output stream through the provided Writer
BaseURL;Api Render Acturl;writeB2;TRUE;Method write(): If the escapeXML parameter is true, the written URL is XML escaped (although it may be a token rather than a valid URL)
BaseURL;Api Render Acturl;writeB3;TRUE;Method write(): If the escapeXML parameter is false, no excaping is performed
BaseURL;Api Render Acturl;writeB4;FALSE;Method write(): Throws IOException if an I/O error occurs
BaseURL;Api Render Acturl;addProperty1;TRUE;Method addProperty(String, String): Adds a property value to an existing key
BaseURL;Api Render Acturl;addProperty2;TRUE;Method addProperty(String, String): Existing property values for the key are retained
BaseURL;Api Render Acturl;addProperty3;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
BaseURL;Api Render Acturl;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
BaseURL;Api Render Acturl;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
BaseURL;Api Render Acturl;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
BaseURL;Api Render Resurl;setParameterA1;TRUE;Method setParameter(String, String): Sets the parameter value for the specified name
BaseURL;Api Render Resurl;setParameterA2;TRUE;Method setParameter(String, String): For a render URL, a private parameter can be set
BaseURL;Api Render Resurl;setParameterA3;TRUE;Method setParameter(String, String): For a render URL, a public parameter can be set
BaseURL;Api Render Resurl;setParameterA4;TRUE;Method setParameter(String, String): For an action URL, an action parameter can be set
BaseURL;Api Render Resurl;setParameterA5;TRUE;Method setParameter(String, String): For a resource URL, a resource parameter can be set
BaseURL;Api Render Resurl;setParameterA6;TRUE;Method setParameter(String, String): All previously existing values for the specified key are removed
BaseURL;Api Render Resurl;setParameterA7;TRUE;Method setParameter(String, String): If the value is null, all values for the specified key are removed
BaseURL;Api Render Resurl;setParameterA8;TRUE;Method setParameter(String, String): Throws IllegalArgumentException if the name is null
BaseURL;Api Render Resurl;setParameterB1;TRUE;Method setParameter(String, String[]): Sets the parameter value array for the specified name
BaseURL;Api Render Resurl;setParameterB2;TRUE;Method setParameter(String, String[]): For a render URL, a private parameter can be set
BaseURL;Api Render Resurl;setParameterB3;TRUE;Method setParameter(String, String[]): For a render URL, a public parameter can be set
BaseURL;Api Render Resurl;setParameterB4;TRUE;Method setParameter(String, String[]): For an action URL, an action parameter can be set
BaseURL;Api Render Resurl;setParameterB5;TRUE;Method setParameter(String, String[]): For a resource URL, a resource parameter can be set
BaseURL;Api Render Resurl;setParameterB6;TRUE;Method setParameter(String, String[]): All previously existing values for the specified key are removed
BaseURL;Api Render Resurl;setParameterB7;TRUE;Method setParameter(String, String[]): If the value is null, all values for the specified key are removed
BaseURL;Api Render Resurl;setParameterB8;TRUE;Method setParameter(String, String[]): Throws IllegalArgumentException if the name is null
BaseURL;Api Render Resurl;setParameters1;TRUE;Method setParameters(java.util.Map): Sets the parameter map to the specified value
BaseURL;Api Render Resurl;setParameters2;TRUE;Method setParameters(java.util.Map): For a render URL, public parameters can be set through the map
BaseURL;Api Render Resurl;setParameters3;TRUE;Method setParameters(java.util.Map): For a render URL, private parameters can be set through the map
BaseURL;Api Render Resurl;setParameters4;TRUE;Method setParameters(java.util.Map): For an action URL, action parameters can be set through the map
BaseURL;Api Render Resurl;setParameters5;TRUE;Method setParameters(java.util.Map): For a resource URL, resource parameters can be set through the map
BaseURL;Api Render Resurl;setParameters6;TRUE;Method setParameters(java.util.Map): Previously existing private, action, or resource parameters not contained in the specified input map are removed
BaseURL;Api Render Resurl;setParameters7;TRUE;Method setParameters(java.util.Map): Previously existing public parameters not contained in the specified input map remain unchanged
BaseURL;Api Render Resurl;setParameters8;TRUE;Method setParameters(java.util.Map): Parameters that are set are available in requests initiated through the URL
BaseURL;Api Render Resurl;setParameters9;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if the input map is null
BaseURL;Api Render Resurl;setParameters10;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is null
BaseURL;Api Render Resurl;setParameters11;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any key in the map is the empty string ("") 
BaseURL;Api Render Resurl;setParameters12;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if the values array for any key is null 
BaseURL;Api Render Resurl;setParameters13;TRUE;Method setParameters(java.util.Map): Throws IllegalArgumentException if any element in any values array is null 
BaseURL;Api Render Resurl;setParameters14;TRUE;Method setParameters(java.util.Map): Throws IllegalStateException if the method is invoked after the sendRedirect method has been called
BaseURL;Api Render Resurl;setSecure2;TRUE;Method setSecure(boolean): If the input parameter is true, the resulting URL uses a secure connection (HTTPS)
BaseURL;Api Render Resurl;setSecure3;TRUE;Method setSecure(boolean): If the input parameter is false, the resulting URL can use either a secure or non-secure connection
BaseURL;Api Render Resurl;setSecure4;TRUE;Method setSecure(boolean): Throws a PortletSecurityException if the run-time environment does not support the setting
BaseURL;Api Render Resurl;toString;TRUE;Method toString(): Returns a String containing the portlet URL representation to be included in the markup
BaseURL;Api Render Resurl;getParameterMap1;TRUE;Method getParameterMap(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object for the parameter names and values if parameters are available
BaseURL;Api Render Resurl;getParameterMap2;TRUE;Method getParameterMap(): For a render URL, the returned map contains all public and private parameters for the request
BaseURL;Api Render Resurl;getParameterMap3;TRUE;Method getParameterMap(): For an action URL, the returned map contains all action parameters for the request
BaseURL;Api Render Resurl;getParameterMap4;TRUE;Method getParameterMap(): For a resource URL, the returned map contains all resource parameters for the request
BaseURL;Api Render Resurl;getParameterMap5;TRUE;Method getParameterMap(): For a resource URL, the returned map does not contain any render parameters for the request
BaseURL;Api Render Resurl;getParameterMap6;TRUE;Method getParameterMap(): Returns an empty map if no parameters exist
BaseURL;Api Render Resurl;writeA1;TRUE;Method write(): Writes the URL to the output stream through the provided Writer
BaseURL;Api Render Resurl;writeA2;TRUE;Method write(): The written URL is XML escaped (although it may be a token rather than a valid URL)
BaseURL;Api Render Resurl;writeA3;FALSE;Method write(): Throws IOException if an I/O error occurs
BaseURL;Api Render Resurl;writeB1;TRUE;Method write(): Writes the URL to the output stream through the provided Writer
BaseURL;Api Render Resurl;writeB2;TRUE;Method write(): If the escapeXML parameter is true, the written URL is XML escaped (although it may be a token rather than a valid URL)
BaseURL;Api Render Resurl;writeB3;TRUE;Method write(): If the escapeXML parameter is false, no excaping is performed
BaseURL;Api Render Resurl;writeB4;FALSE;Method write(): Throws IOException if an I/O error occurs
BaseURL;Api Render Resurl;addProperty1;TRUE;Method addProperty(String, String): Adds a property value to an existing key
BaseURL;Api Render Resurl;addProperty2;TRUE;Method addProperty(String, String): Existing property values for the key are retained
BaseURL;Api Render Resurl;addProperty3;TRUE;Method addProperty(String, String): Throws IllegalArgumentException if the specified key is null
BaseURL;Api Render Resurl;setProperty1;TRUE;Method setProperty(String, String): Sets a property value for the specified key
BaseURL;Api Render Resurl;setProperty2;TRUE;Method setProperty(String, String): Resets any existing property values for the specified key
BaseURL;Api Render Resurl;setProperty3;TRUE;Method setProperty(String, String): Throws IllegalArgumentException if the specified key is null
PortletURL;Api Render Renurl;setWindowState1;TRUE;Method setWindowState(WindowState): Sets the WindowState to be used when the URL is activated
PortletURL;Api Render Renurl;setWindowState2;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the portal does not support the specified Window State
PortletURL;Api Render Renurl;setWindowState3;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the specified WindowState is not declared in the deployment descriptor
PortletURL;Api Render Renurl;setWindowState4;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the user is not allowed to switch to the specified WindowState
PortletURL;Api Render Renurl;setPortletMode1;TRUE;Method setPortletMode(PortletMode): Sets the PortletMode to be used when the URL is activated
PortletURL;Api Render Renurl;setPortletMode2;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the portal does not support the specified Window State
PortletURL;Api Render Renurl;setPortletMode3;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the specified PortletMode is not declared in the deployment descriptor
PortletURL;Api Render Renurl;setPortletMode4;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the user is not allowed to switch to the specified PortletMode
PortletURL;Api Render Renurl;getPortletMode1;TRUE;Method getPortletMode(): Returns the PortletMode object set on the URL
PortletURL;Api Render Renurl;getPortletMode2;TRUE;Method getPortletMode(): Returns null if the PortletMode has not been set
PortletURL;Api Render Renurl;getWindowState1;TRUE;Method getWindowState(): Returns the WindowState object set on the URL
PortletURL;Api Render Renurl;getWindowState2;TRUE;Method getWindowState(): Returns null if the Window State has not been set
PortletURL;Api Render Renurl;removePublicRenderParameter1;TRUE;Method removePublicRenderParameter(String): Removes the specified public render parameter
PortletURL;Api Render Renurl;removePublicRenderParameter2;TRUE;Method removePublicRenderParameter(String): Throws IllegalArgumentException if the name is null
PortletURL;Api Render Acturl;setWindowState1;TRUE;Method setWindowState(WindowState): Sets the WindowState to be used when the URL is activated
PortletURL;Api Render Acturl;setWindowState2;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the portal does not support the specified Window State
PortletURL;Api Render Acturl;setWindowState3;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the specified WindowState is not declared in the deployment descriptor
PortletURL;Api Render Acturl;setWindowState4;TRUE;Method setWindowState(WindowState): Throws WindowStateException if the user is not allowed to switch to the specified WindowState
PortletURL;Api Render Acturl;setPortletMode1;TRUE;Method setPortletMode(PortletMode): Sets the PortletMode to be used when the URL is activated
PortletURL;Api Render Acturl;setPortletMode2;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the portal does not support the specified Window State
PortletURL;Api Render Acturl;setPortletMode3;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the specified PortletMode is not declared in the deployment descriptor
PortletURL;Api Render Acturl;setPortletMode4;TRUE;Method setPortletMode(PortletMode): Throws PortletModeException if the user is not allowed to switch to the specified PortletMode
PortletURL;Api Render Acturl;getPortletMode1;TRUE;Method getPortletMode(): Returns the PortletMode object set on the URL
PortletURL;Api Render Acturl;getPortletMode2;TRUE;Method getPortletMode(): Returns null if the PortletMode has not been set
PortletURL;Api Render Acturl;getWindowState1;TRUE;Method getWindowState(): Returns the WindowState object set on the URL
PortletURL;Api Render Acturl;getWindowState2;TRUE;Method getWindowState(): Returns null if the Window State has not been set
PortletURL;Api Render Acturl;removePublicRenderParameter1;TRUE;Method removePublicRenderParameter(String): Removes the specified public render parameter
PortletURL;Api Render Acturl;removePublicRenderParameter2;TRUE;Method removePublicRenderParameter(String): Throws IllegalArgumentException if the name is null
ResourceURL;Api Render Resurl;fieldFULL;TRUE;Has String field FULL with value of "cacheLevelFull" 
ResourceURL;Api Render Resurl;fieldPAGE;TRUE;Has String field PAGE with value of "cacheLevelPage" 
ResourceURL;Api Render Resurl;fieldPORTLET;TRUE;Has String field PORTLET with value of "cacheLevelPortlet" 
ResourceURL;Api Render Resurl;fieldSHARED;TRUE;Has String field SHARED with value of "javax.portlet.shared" 
ResourceURL;Api Render Resurl;implementsBaseURL2;TRUE;Method implementsBaseUR(): All tests described for the BaseURL execute correctly with the ResourceURL
ResourceURL;Api Render Resurl;setResourceID;TRUE;Method setResourceID(String): Sets the specified String as the portlet resource ID
ResourceURL;Api Render Resurl;getCacheability;TRUE;Method getCacheability(): Returns a String containing the cacheability level set on the resource URL
ResourceURL;Api Render Resurl;setCacheability1;TRUE;Method setCacheability(String): Sets the cacheability level for the resource URL
ResourceURL;Api Render Resurl;setCacheability2;TRUE;Method setCacheability(String): Throws IllegalArgumentException if the input parameter does not have a value of "FULL", "PAGE", or "PORTLET"
ResourceURL;Api Render Resurl;setCacheability3;TRUE;Method setCacheability(String): Throws IllegalStateException if the specified cacheability level is weaker than the cacheability level for the parent resource URL
PortletURLGenerationListener;Api Render;configuration;TRUE;A PortletURLGenerationListener can be configured in the portlet deployment descriptor
PortletURLGenerationListener;Api Render;filterActionURL1;TRUE;Method filterActionURL(PortletURL): The filterActionURL(PortletURL): method is called before the toString or write methods are executed on an action URL
PortletURLGenerationListener;Api Render;filterActionURL2;TRUE;Method filterActionURL(PortletURL): The filterActionURL method is passed the PortletURL object representing the action URL
PortletURLGenerationListener;Api Render;filterActionURL3;TRUE;Method filterActionURL(PortletURL): The input action URL object can be modified by setting a parameter and the modified URL object is processed by the PortletURL toString or write method
PortletURLGenerationListener;Api Render;filterActionURL4;TRUE;Method filterActionURL(PortletURL): The input action URL object can be modified by setting a property and the modified URL object is processed by the PortletURL toString or write method
PortletURLGenerationListener;Api Render;filterRenderURL5;TRUE;Method filterRenderURL(PortletURL): The filterRenderURL(PortletURL): method is called before the toString or write methods are executed on an action URL
PortletURLGenerationListener;Api Render;filterRenderURL6;TRUE;Method filterRenderURL(PortletURL): The filterRenderURL method is passed the PortletURL object representing the action URL
PortletURLGenerationListener;Api Render;filterRenderURL7;TRUE;Method filterRenderURL(PortletURL): The input action URL object can be modified by setting a parameter and the modified URL object is processed by the PortletURL toString or write method
PortletURLGenerationListener;Api Render;filterRenderURL8;TRUE;Method filterRenderURL(PortletURL): The input action URL object can be modified by setting a property and the modified URL object is processed by the PortletURL toString or write method
PortletURLGenerationListener;Api Render;filterResourceURL1;TRUE;Method filterResourceURL(ResourceURL): The filterResourceURL(PortletURL): method is called before the toString or write methods are executed on an action URL
PortletURLGenerationListener;Api Render;filterResourceURL2;TRUE;Method filterResourceURL(ResourceURL): The filterResourceURL method is passed the PortletURL object representing the action URL
PortletURLGenerationListener;Api Render;filterResourceURL3;TRUE;Method filterResourceURL(ResourceURL): The input action URL object can be modified by setting a parameter and the modified URL object is processed by the PortletURL toString or write method
PortletURLGenerationListener;Api Render;filterResourceURL4;TRUE;Method filterResourceURL(ResourceURL): The input action URL object can be modified by setting a property and the modified URL object is processed by the PortletURL toString or write method
PortletURLGenerationListener;Api Render;filterResourceURL5;TRUE;Method filterResourceURL(ResourceURL): The input action URL object can be modified by setting the resource ID and the modified URL object is processed by the PortletURL toString or write method
Exception Tests;;;;
PortletModeException;Api Render;hasGetMode2;TRUE;Returns the PortletMode object causing this exception
UnavailableException;Api Render;isPermanent1;TRUE;Method isPermanent(): Returns a boolean
UnavailableException;Api Render;isPermanent2;TRUE;Method isPermanent(): Returns true if the portlet is permanently unavailable 
UnavailableException;Api Render;isPermanent3;TRUE;Method isPermanent(): Returns false if the portlet is temporarily unavailable 
UnavailableException;Api Render;getUnavailableSeconds1;TRUE;Method getUnavailableSeconds(): Returns an integer 
UnavailableException;Api Render;getUnavailableSeconds2;TRUE;Method getUnavailableSeconds(): Returns a number <= 0 if the portlet is permanently unavailable
ValidatorException;Api Render;constructor2;TRUE;For ValidatorException(java.lang.String, java.util.Collection<java.lang.String>), the failedKeys parameter may be null
ValidatorException;Api Render;constructor4;TRUE;For ValidatorException(java.lang.String, java.lang.Throwable, java.util.Collection<java.lang.String>), the failedKeys parameter may be null
ValidatorException;Api Render;constructor6;TRUE;For ValidatorException(java.lang.Throwable, java.util.Collection<java.lang.String>), the failedKeys parameter may be null
ValidatorException;Api Render;getFailedKeys1;TRUE;Method getFailedKeys(): Returns a java.util.Enumeration<java.lang.String> object containing the preference keys that failed validation
ValidatorException;Api Render;getFailedKeys2;TRUE;Method getFailedKeys(): Returns an empty enmueration if no failed keys are available
WindowStateException;Api Render;getState;TRUE;Method getState(): Returns the WindowState object causing this exception
Annotation Tests;;;;
ProcessAction;Api Action;name;TRUE;Method name(): On an action request, the method is executed if the parameter "javax.portlet.action" matches the name field
ProcessEvent;Api Event;qname;TRUE;Method qname(): On an event request, the method is executed if the Event qname matches the qname field
ProcessEvent;Api Event;name;TRUE;Method name(): On an event request, the method is executed if the Event name matches the name field
RenderMode;Api Render;name;TRUE;Method name(): On a render request, the method is executed if the portlet mode matches the name field
Portlet Tests;;;;
PortletConfig;Api Render;getPortletName;TRUE;Method getPortletName(): Returns a String containing the portlet name
PortletConfig;Api Render;getPortletContext;TRUE;Method getPortletContext(): Returns the PortletContext object associated with the portlet
PortletConfig;Api Render;getResourceBundle;TRUE;Method getResourceBundle(Locale): Returns the ResourceBundle for the specified locale
PortletConfig;Api Render;getInitParameter1;TRUE;Method getInitParameter(String): Returns a String containing the initialization parameter value for the given name
PortletConfig;Api Render;getInitParameter3;TRUE;Method getInitParameter(String): Throws IllegalArgumentException if the name parameter is null
PortletConfig;Api Render;getInitParameterNames1;TRUE;Method getInitParameterNames(): Returns an java.util.Enumeration<java.lang.String> containing the names of the initialization parameters
PortletConfig;Api Render;getPublicRenderParameterNames1;TRUE;Method getPublicRenderParameterNames(): Returns an java.util.Enumeration<java.lang.String> containing the names of the public render parameters
PortletConfig;Api Render;getDefaultNamespace1;TRUE;Method getDefaultNamespace(): Returns a String containing the default namespace for events and public render parameters as defined in the deployment descriptor
PortletConfig;Api Render;getPublishingEventQNames1;TRUE;Method getPublishingEventQNames(): Returns an java.util.Enumeration<java.lang.String> containing the publishing event qnames as defined in the deployment descriptor
PortletConfig;Api Render;getProcessingEventQNames1;TRUE;Method getProcessingEventQNames(): Returns an java.util.Enumeration<java.lang.String> containing the processing event qnames as defined in the deployment descriptor
PortletConfig;Api Render;getSupportedLocales1;TRUE;Method getSupportedLocales(): Returns an java.util.Enumeration<java.lang.String> containing the names of the supported locales as defined in the deployment descriptor
PortletConfig;Api Render;getContainerRuntimeOptions1;TRUE;Method getContainerRuntimeOptions(): Returns an java.util.Map<java.lang.String,java.lang.String[]> object containing the container runtime options as defined in the deployment descriptor
PortletConfig;Api Render;getContainerRuntimeOptions2;TRUE;Method getContainerRuntimeOptions(): If the same option is defined at the portlet application and at the portlet level, the definition at the portlet level takes precedence
PortletConfig;Api Render;getContainerRuntimeOptions3;TRUE;Method getContainerRuntimeOptions(): If the portlet container does not support a runtime option defined in the portlet descriptor, that option will not be returned in this map
PortletConfig;Api Render;getContainerRuntimeOptions4;TRUE;Method getContainerRuntimeOptions(): Returns an empty map if no container runtime options have been defined 
PortletConfig;Api Render 2;getInitParameter2;TRUE;Method getInitParameter(String): Returns null if the specified initialization parameter does not exist
PortletConfig;Api Render 2;getInitParameterNames2;TRUE;Method getInitParameterNames(): Returns an empty Enumeration if there are no initialization parameters available 
PortletConfig;Api Render 2;getPublicRenderParameterNames2;TRUE;Method getPublicRenderParameterNames(): Returns an empty Enumeration if there are no public render parameters are defined 
PortletConfig;Api Render 2;getDefaultNamespace2;TRUE;Method getDefaultNamespace(): Returns XMLConstants.NULL_NS_URI if no default namespace is defined in the deployment descriptor 
PortletConfig;Api Render 2;getPublishingEventQNames2;TRUE;Method getPublishingEventQNames(): Returns an empty Enumeration if there are no processing events are defined
PortletConfig;Api Render 2;getProcessingEventQNames2;TRUE;Method getProcessingEventQNames(): Returns an empty Enumeration if there are no processing events are defined
PortletConfig;Api Render 2;getSupportedLocales2;TRUE;Method getSupportedLocales(): Returns an empty Enumeration if there are no supported locales are defined
PortletMode;Api Render;constructor1;TRUE;The constructor PortletMode(java.lang.String): allows a PortletMode object of the specified name to be constructed
PortletMode;Api Render;constructor2;TRUE;The constructor PortletMode(java.lang.String): converts any upper case letters in the name parameter to lower case
PortletMode;Api Render;fieldEDIT;TRUE;Has PortletMode field EDIT with value of PortletMode.EDIT 
PortletMode;Api Render;fieldHELP;TRUE;Has PortletMode field HELP with value of PortletMode.HELP 
PortletMode;Api Render;fieldVIEW;TRUE;Has PortletMode field VIEW with value of PortletMode.VIEW 
PortletMode;Api Render;toString;TRUE;Method toString(): Returns a String representation of the portlet mode
PortletMode;Api Render;hashCode;TRUE;Method hashCode(): Returns an int containing the has code for the portlet mode
PortletMode;Api Render;equals;TRUE;Method equals(): Returns true if the PortletMode equals the specified PortletMode
WindowState;Api Render;constructor1;TRUE;The constructor WindowState(java.lang.String): allows a WindowState object of the specified name to be constructed
WindowState;Api Render;constructor2;TRUE;The constructor WindowState(java.lang.String): converts any upper case letters in the name parameter to lower case
WindowState;Api Render;fieldMAXIMIZED;TRUE;Has WindowState field MAXIMIZED with value of WindowState.MAXIMIZED 
WindowState;Api Render;fieldMINIMIZED;TRUE;Has WindowState field MINIMIZED with value of WindowState.MINIMIZED 
WindowState;Api Render;fieldNORMAL;TRUE;Has WindowState field NORMAL with value of WindowState.NORMAL 
WindowState;Api Render;toString;TRUE;Method toString(): Returns a String representation of the portlet mode
WindowState;Api Render;hashCode;TRUE;Method hashCode(): Returns an int containing the has code for the portlet mode
WindowState;Api Render;equals;TRUE;Method equals(): Returns true if the WindowState equals the specified WindowState
Portlet;Api Render;init1;TRUE;Method init(PortletConfig): is called for the portlet defined in the deployment descriptor
Portlet;Api Render;init2;TRUE;Method init(PortletConfig): If the init method throws a PortletException, the portlet will not be placed in service
Portlet;Api Render;render1;TRUE;Method render(RenderRequest, RenderResponse): is called when the portlet is to be rendered
Portlet;Api Render;render2;TRUE;Method render(RenderRequest, RenderResponse): is called when a Render URL for the portlet is triggered
Portlet;Api Render;destroy;FALSE;Method destroy(): is called when the portlet is to be taken out of service
Portlet;Api Action;processAction;TRUE;Method processAction(ActionRequest, ActionResponse): is called when an action URL for the portlet is triggered
Event;Api Event;getQName1;TRUE;Method getQName(): Returns the javax.xml.namespace.QName object for the Event
Event;Api Event;getQName2;TRUE;Method getQName(): Returned value may not be null
Event;Api Event;getName1;TRUE;Method getName(): Returns a String containing the event local name
Event;Api Event;getName2;TRUE;Method getName(): Returned value may not be null
Event;Api Event;getValue1;TRUE;Method getValue(String, String): Returns a java.io.Serializable object representing the event payload
Event;Api Event;getValue2;TRUE;Method getValue(String, String): Returned value is null if the event has no payload
EventPortlet;Api Event;processEvent;TRUE;Method processEvent(EventRequest, EventResponse): is called when an event is targeted to the portlet
ResourceServingPortlet;Api Resource;serveResource;TRUE;Method serveResource(ResourceRequest, ResourceResponse): is called to allow the portlet to generate resource content 
GenericPortlet;Api Render;initA;TRUE;Method init(): Called when the portlet is initialized
GenericPortlet;Api Render;initB;TRUE;Method init(PortletConfig): Called when the portlet is initialized
GenericPortlet;Api Render;processAction1;TRUE;Method processAction(ActionRequest, ActionResponse): If overridden, the Portlet.processAction tests execute correctly
GenericPortlet;Api Render;processAction2;TRUE;Method processAction(ActionRequest, ActionResponse): Dispatches to @ProcessAction annotated method matching the ActionRequest.ACTION_NAME parameter
GenericPortlet;Api Render;processAction3;TRUE;Method processAction(ActionRequest, ActionResponse): Throws PortletException if no matching @ProcessAction annotated method found
GenericPortlet;Api Render;render1;TRUE;Method render(RenderRequest, RenderResponse): If overridden, Portlet.render tests execute correctly
GenericPortlet;Api Render;render2;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=null, Calls the doHeaders(RenderRequest, RenderResponse): method
GenericPortlet;Api Render;render3;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=null, Sets the title on RenderResponse with the value returned by the getTitle(RenderRequest): method
GenericPortlet;Api Render;render4;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=null, Retrieves the next possible portlet modes from the PortletConfig and sets them on the RenderResponse
GenericPortlet;Api Render;render5;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=null, Calls the DoDispatch(RenderRequest, RenderResponse): method 
GenericPortlet;Api Render;render6;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=RENDER_HEADERS, Calls the doHeaders(RenderRequest, RenderResponse): method
GenericPortlet;Api Render;render7;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=RENDER_HEADERS, Sets the title on RenderResponse with the value returned by the getTitle(RenderRequest): method
GenericPortlet;Api Render;render8;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=RENDER_HEADERS, Retrieves the next possible portlet modes from the PortletConfig and sets them on the RenderResponse
GenericPortlet;Api Render;render9;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=RENDER_MARKUP, Calls the DoDispatch(RenderRequest, RenderResponse): method 
GenericPortlet;Api Render;render10;TRUE;Method render(RenderRequest, RenderResponse): If RENDER_PART=<any other value>, throws PortletException 
GenericPortlet;Api Render;getTitle1;TRUE;Method getTitle(): If overridden, the String returned by this method is used as the portlet title
GenericPortlet;Api Render;getTitle2;TRUE;Method getTitle(): Returns a String containing the title from the portlet resource bundle under the key "javax.portlet.title"
GenericPortlet;Api Render;getTitle3;TRUE;Method getTitle(): Returns null if no title is available from the portlet resource bundle
GenericPortlet;Api Render;doDispatch1;TRUE;Method doDispatch(RenderRequest, RenderResponse): If overridden, is called when markup is to be generated
GenericPortlet;Api Render;doDispatch2;TRUE;Method doDispatch(RenderRequest, RenderResponse): If not overridden, If the WindowState is minimized, no markup method is called and no markup is generated
GenericPortlet;Api Render;doDispatch3;TRUE;Method doDispatch(RenderRequest, RenderResponse): If not overridden and not minimized, the @RenderMode annotated method matching the current PortletMode is called 
GenericPortlet;Api Render;doDispatch4;TRUE;Method doDispatch(RenderRequest, RenderResponse): If not overridden, not minimized, and no annotated method is found, if the current render mode is "view", the doView(RenderRequest, RenderResponse): method is called  
GenericPortlet;Api Render;doDispatch5;TRUE;Method doDispatch(RenderRequest, RenderResponse): If not overridden, not minimized, and no annotated method is found, if the current render mode is "edit", the doEdit(RenderRequest, RenderResponse): method is called  
GenericPortlet;Api Render;doDispatch6;TRUE;Method doDispatch(RenderRequest, RenderResponse): If not overridden, not minimized, and no annotated method is found, if the current render mode is "help", the doHelp(RenderRequest, RenderResponse): method is called  
GenericPortlet;Api Render;doDispatch7;TRUE;Method doDispatch(RenderRequest, RenderResponse): If not overridden not minimized, no annotated method is found, ant the mode is not "view", "edit", or "help", throws a PortletException
GenericPortlet;Api Render;doView1;TRUE;Method doView(RenderRequest, RenderResponse): If overridden, is called when a render request in view mode occurs
GenericPortlet;Api Render;doView2;TRUE;Method doView(RenderRequest, RenderResponse): If not overridden, throws a PortletException
GenericPortlet;Api Render;doEdit1;TRUE;Method doEdit(RenderRequest, RenderResponse): If overridden, is called when a render request in edit mode occurs
GenericPortlet;Api Render;doEdit2;TRUE;Method doEdit(RenderRequest, RenderResponse): If not overridden, throws a PortletException
GenericPortlet;Api Render;doHelp1;TRUE;Method doHelp(RenderRequest, RenderResponse): If overridden, is called when a render request in help mode occurs
GenericPortlet;Api Render;doHelp2;TRUE;Method doHelp(RenderRequest, RenderResponse): If not overridden, throws a PortletException
GenericPortlet;Api Render;getPortletConfig;TRUE;Method getPortletConfig(): Returns the PortletConfig object for the portlet
GenericPortlet;Api Render;destroy;TRUE;Method destroy(): Called by the portlet container to indicate to a portlet that the portlet is being taken out of service. 
GenericPortlet;Api Render;serveResource1;TRUE;Method serveResource(ResourceRequest, ResourceResponse): Is called when a ResourceURL targeting the portlet is triggered
GenericPortlet;Api Render;serveResource2;TRUE;Method serveResource(ResourceRequest, ResourceResponse): Forwards the request to the ResourceID value if the method is not overridden and if the resource ID is not null
GenericPortlet;Api Render;serveResource3;TRUE;Method serveResource(ResourceRequest, ResourceResponse): Does nothing if the method is not overridden and if the resource ID is null
GenericPortlet;Api Render;processEvent1;TRUE;Method processEvent(EventRequest, EventResponse): Is called when an Event targeting the portlet occurs
GenericPortlet;Api Render;processEvent2;TRUE;Method processEvent(EventRequest, EventResponse): The @ProcessEvent annotated method matching the current Event is called 
GenericPortlet;Api Render;processEvent3;TRUE;Method processEvent(EventRequest, EventResponse): If there is no matching annotated method, sets the render parameters on the EventResponse to equal the EventRequest parameters
GenericPortlet;Api Render;doHeaders1;TRUE;Method doHeaders(RenderRequest, RenderResponse): Is called during generic portlet render request processing  
GenericPortlet;Api Render;doHeaders2;TRUE;Method doHeaders(RenderRequest, RenderResponse): The default implementation does nothing
GenericPortlet;Api Render;getNextPossiblePortletModes1;TRUE;Method getNextPossiblePortletModes(): Is called during generic portlet render request processing
GenericPortlet;Api Render;getNextPossiblePortletModes2;TRUE;Method getNextPossiblePortletModes(): The default implementation returns null
Environment Tests;;;;
CacheControl;Api Render;getExpirationTime1;TRUE;Method getExpirationTime(): Returns the expiration time set through setExpirationTime
CacheControl;Api Render;getExpirationTime2;TRUE;Method getExpirationTime(): Returns the default expiration time from the deployment descriptor if the expiration time has not been set
CacheControl;Api Render;getExpirationTime3;TRUE;Method getExpirationTime(): Returns 0 if the expiration time has not been set and no default is set in the deployment descriptor
CacheControl;Api Render;setExpirationTime1;TRUE;Method setExpirationTime(int): Sets the expiration time for the current response to the specified value
CacheControl;Api Render;setExpirationTime2;TRUE;Method setExpirationTime(int): If the expiration value is set to 0, caching is disabled
CacheControl;Api Render;setExpirationTime3;TRUE;Method setExpirationTime(int): If the expiration value is set to -1, the cache does not expire
CacheControl;Api Render;isPublicScope1;TRUE;Method isPublicScope(): Returns true if the caching scope has been set to public through the setPublicScope method
CacheControl;Api Render;isPublicScope2;TRUE;Method isPublicScope(): Returns true if the caching scope default has not been set with the setPublicScope method, but has been set to public in the deployment descriptor 
CacheControl;Api Render;isPublicScope3;TRUE;Method isPublicScope(): Returns false if the caching scope has not been set with the setPublicScope method, but has been set to private through the setPublicScope method 
CacheControl;Api Render;isPublicScope5;TRUE;Method isPublicScope(): Returns false if the caching scope has not been set with the setPublicScope method and has not been set in the deployment descriptor
CacheControl;Api Render;setPublicScope1;TRUE;Method setPublicScope(boolean): If the input parameter is true, the cache scope is set to public
CacheControl;Api Render;setPublicScope2;TRUE;Method setPublicScope(boolean): If the input parameter is false, the cache scope is set to non-public
CacheControl;Api Render;getETag1;TRUE;Method getETag(): Returns a String containing the ETag for the current response
CacheControl;Api Render;getETag2;TRUE;Method getETag(): Returns null if no ETag is set on the response
CacheControl;Api Render;setETag1;TRUE;Method setETag(String): Sets an ETag for the current response
CacheControl;Api Render;setETag2;TRUE;Method setETag(String): A previously-set ETag is overwritten
CacheControl;Api Render;setETag3;TRUE;Method setETag(String): Removes the ETag if the input parameter is null
CacheControl;Api Render;useCachedContent1;TRUE;Method useCachedContent(): Returns true if cached content has been set to valid through the setUseCachedContent method
CacheControl;Api Render;useCachedContent2;TRUE;Method useCachedContent(): Returns false if cached content has been set to invalid through the setUseCachedContent method
CacheControl;Api Render;useCachedContent3;TRUE;Method useCachedContent(): Returns false if the use cached content indcator has not been set
CacheControl;Api Render;setUseCachedContent1;TRUE;Method setUseCachedContent(boolean): If set to true, the cached content is valid 
CacheControl;Api Render;setUseCachedContent2;TRUE;Method setUseCachedContent(boolean): If set to false, the cached content is invalid 
CacheControl;Api Resource;getExpirationTime1;TRUE;Method getExpirationTime(): Returns the expiration time set through setExpirationTime
CacheControl;Api Resource;getExpirationTime2;TRUE;Method getExpirationTime(): Returns the default expiration time from the deployment descriptor if the expiration time has not been set
CacheControl;Api Resource;getExpirationTime3;TRUE;Method getExpirationTime(): Returns 0 if the expiration time has not been set and no default is set in the deployment descriptor
CacheControl;Api Resource;setExpirationTime1;TRUE;Method setExpirationTime(int): Sets the expiration time for the current response to the specified value
CacheControl;Api Resource;setExpirationTime2;TRUE;Method setExpirationTime(int): If the expiration value is set to 0, caching is disabled
CacheControl;Api Resource;setExpirationTime3;TRUE;Method setExpirationTime(int): If the expiration value is set to -1, the cache does not expire
CacheControl;Api Resource;isPublicScope1;TRUE;Method isPublicScope(): Returns true if the caching scope has been set to public through the setPublicScope method
CacheControl;Api Resource;isPublicScope2;TRUE;Method isPublicScope(): Returns true if the caching scope default has not been set with the setPublicScope method, but has been set to public in the deployment descriptor 
CacheControl;Api Resource;isPublicScope3;TRUE;Method isPublicScope(): Returns false if the caching scope has not been set with the setPublicScope method, but has been set to private through the setPublicScope method 
CacheControl;Api Resource;isPublicScope5;TRUE;Method isPublicScope(): Returns false if the caching scope has not been set with the setPublicScope method and has not been set in the deployment descriptor
CacheControl;Api Resource;setPublicScope1;TRUE;Method setPublicScope(boolean): If the input parameter is true, the cache scope is set to public
CacheControl;Api Resource;setPublicScope2;TRUE;Method setPublicScope(boolean): If the input parameter is false, the cache scope is set to non-public
CacheControl;Api Resource;getETag1;TRUE;Method getETag(): Returns a String containing the ETag for the current response
CacheControl;Api Resource;getETag2;TRUE;Method getETag(): Returns null if no ETag is set on the response
CacheControl;Api Resource;setETag1;TRUE;Method setETag(String): Sets an ETag for the current response
CacheControl;Api Resource;setETag2;TRUE;Method setETag(String): A previously-set ETag is overwritten
CacheControl;Api Resource;setETag3;TRUE;Method setETag(String): Removes the ETag if the input parameter is null
CacheControl;Api Resource;useCachedContent1;TRUE;Method useCachedContent(): Returns true if cached content has been set to valid through the setUseCachedContent method
CacheControl;Api Resource;useCachedContent2;TRUE;Method useCachedContent(): Returns false if cached content has been set to invalid through the setUseCachedContent method
CacheControl;Api Resource;useCachedContent3;TRUE;Method useCachedContent(): Returns false if the use cached content indcator has not been set
CacheControl;Api Resource;setUseCachedContent1;TRUE;Method setUseCachedContent(boolean): If set to true, the cached content is valid 
CacheControl;Api Resource;setUseCachedContent2;TRUE;Method setUseCachedContent(boolean): If set to false, the cached content is invalid 
PortalContext;Api Render;fieldMARKUP_HEAD_ELEMENT_SUPPORT;TRUE;Has String field MARKUP_HEAD_ELEMENT_SUPPORT with value of "javax.portlet.markup.head.element.support" 
PortalContext;Api Render;getProperty1;TRUE;Method getProperty(String): Returns a String containing the value for the specified property 
PortalContext;Api Render;getProperty2;TRUE;Method getProperty(String): Returns null if there is no property defined for the specified name
PortalContext;Api Render;getProperty3;TRUE;Method getProperty(String): Throws IllegalArgumentException if the specified name is null 
PortalContext;Api Render;getPropertyNames1;TRUE;Method getPropertyNames(): Returns an java.util.Enumeration<java.lang.String> containing all portal property names
PortalContext;Api Render;getPropertyNames2;TRUE;Method getPropertyNames(): Returns an empty Enumeration if there are no portal property names defined
PortalContext;Api Render;getSupportedPortletModes1;TRUE;Method getSupportedPortletModes(): Returns an java.util.Enumeration<PortletMode> containing all supported portlet modes
PortalContext;Api Render;getSupportedPortletModes2;TRUE;Method getSupportedPortletModes(): The Enumeration returned must contain the view mode
PortalContext;Api Render;getSupportedPortletModes3;TRUE;Method getSupportedPortletModes(): The Enumeration returned must contain the edit mode
PortalContext;Api Render;getSupportedPortletModes4;TRUE;Method getSupportedPortletModes(): The Enumeration returned must contain the help mode
PortalContext;Api Render;getSupportedWindowStates1;TRUE;Method getSupportedWindowStates(): Returns an java.util.Enumeration<WindowState> containing all supported window states
PortalContext;Api Render;getSupportedWindowStates2;TRUE;Method getSupportedWindowStates(): The Enumeration returned must contain the maximized state
PortalContext;Api Render;getSupportedWindowStates3;TRUE;Method getSupportedWindowStates(): The Enumeration returned must contain the minimized state
PortalContext;Api Render;getSupportedWindowStates4;TRUE;Method getSupportedWindowStates(): The Enumeration returned must contain the normal state
PortalContext;Api Render;getPortalInfo1;TRUE;Method getPortalInfo(): Returns a String containing information about the portal
PortalContext;Api Render;getPortalInfo2;TRUE;Method getPortalInfo(): The returned string is of the form "([^ ]+)/([^ ]+) *(.*)", where $1 is the portal name, $2 is the version, and $3 is optional additional information
PortalContext;Api Render;getPortalInfo3;TRUE;Method getPortalInfo(): The returned string contains the portal name
PortalContext;Api Render;getPortalInfo4;TRUE;Method getPortalInfo(): The returned string contains the portal version
PortalContext;Api Render;getPortalInfo5;TRUE;Method getPortalInfo(): The returned string may not be null
PortletContext;Api Render;getServerInfo1;TRUE;Method getServerInfo(): Returns a String containing information about the portlet container
PortletContext;Api Render;getServerInfo2;TRUE;Method getServerInfo(): The returned string is of the form "([^ ]+)/([^ ]+) *(.*)", where $1 is the portal name, $2 is the version, and $3 is optional additional information
PortletContext;Api Render;getServerInfo3;TRUE;Method getServerInfo(): The returned string contains the container name
PortletContext;Api Render;getServerInfo4;TRUE;Method getServerInfo(): The returned string contains the container version
PortletContext;Api Render;getServerInfo5;TRUE;Method getServerInfo(): The returned string may not be null
PortletContext;Api Render;getRequestDispatcher1;TRUE;Method getRequestDispatcher(String): Returns a PortletRequestDispatcher for the specified path
PortletContext;Api Render;getRequestDispatcher2;TRUE;Method getRequestDispatcher(String): Returns null if the specified path does not begin with "/"
PortletContext;Api Render;getRequestDispatcher3;TRUE;Method getRequestDispatcher(String): Returns null if any other error occurs
PortletContext;Api Render;getNamedDispatcher1;TRUE;Method getNamedDispatcher(String): Returns a PortletRequestDispatcher for the specified servlet name
PortletContext;Api Render;getNamedDispatcher2;TRUE;Method getNamedDispatcher(String): Returns null if an error occurs
PortletContext;Api Render;getResourceAsStream1;TRUE;Method getResourceAsStream(String): Returns a java.io.InputStream for the resource at the specified path
PortletContext;Api Render;getResourceAsStream2;TRUE;Method getResourceAsStream(String): Protected resources can be accessed by prefixing the path with "/WEB-INF/"
PortletContext;Api Render;getResourceAsStream3;TRUE;Method getResourceAsStream(String): Returns null if no resource exists at the specified path
PortletContext;Api Render;getMajorVersion;TRUE;Method getMajorVersion(): Returns the major version of the portlet API supported by the container 
PortletContext;Api Render;getMinorVersion;TRUE;Method getMinorVersion(): Returns the minor version of the portlet API supported by the container
PortletContext;Api Render;getMimeType1;TRUE;Method getMimeType(String): Returns a String containing the MIME type of the specified file name
PortletContext;Api Render;getMimeType2;TRUE;Method getMimeType(String): Returns "text/html" for an HTML file with the approriate <mime-mapping> element in web.xml 
PortletContext;Api Render;getMimeType3;TRUE;Method getMimeType(String): Returns "image/gif" for an image file with the approriate <mime-mapping> element in web.xml
PortletContext;Api Render;getMimeType4;TRUE;Method getMimeType(String): Returns null if the MIME type cannot be determined
PortletContext;Api Render;getMimeType5;TRUE;Method getMimeType(String): Returns null if the file does not exist
PortletContext;Api Render;getRealPath1;TRUE;Method getRealPath(String): Returns a String containing the OS-specific real path for the given virtual path
PortletContext;Api Render;getRealPath2;TRUE;Method getRealPath(String): Returns null if the file does not exist
PortletContext;Api Render;getRealPath3;TRUE;Method getRealPath(String): Returns null if the transformation cannot be performed
PortletContext;Api Render;getResourcePaths1;TRUE;Method getResourcePaths(String): Returns a java.util.Set<java.lang.String> containing all the paths to resources within the web application longest sub-path of which matches the supplied path argument  
PortletContext;Api Render;getResourcePaths2;TRUE;Method getResourcePaths(String): A path indicating a file does not end with a slash (/)
PortletContext;Api Render;getResourcePaths3;TRUE;Method getResourcePaths(String): A path indicating a subdirectory ends with a slash (/)
PortletContext;Api Render;getResourcePaths4;TRUE;Method getResourcePaths(String): Returns null if there are no resources in the web application of which the path begins with the supplied path
PortletContext;Api Render;getResource1;TRUE;Method getResource(String): Returns a java.net.URL object that maps to the specified path
PortletContext;Api Render;getResource2;TRUE;Method getResource(String): Returns null if no resource is mapped to the path
PortletContext;Api Render;getResource3;TRUE;Method getResource(String): Throws java.net.MalformedURLException if the path does not begin with a slash (/)
PortletContext;Api Render;getResource4;TRUE;Method getResource(String): Throws java.net.MalformedURLException if the path is malformed
PortletContext;Api Render;getAttribute1;TRUE;Method getAttribute(String): Returns a java.lang.Object attribute value for the specified name
PortletContext;Api Render;getAttribute2;TRUE;Method getAttribute(String): Returns null if there is no attribute value for the specified name
PortletContext;Api Render;getAttribute3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletContext;Api Render;getAttributeNames1;TRUE;Method getAttributeNames(): Returns an java.util.Enumeration<java.lang.String> containing the attribute names in the PortletContext
PortletContext;Api Render;getAttributeNames2;TRUE;Method getAttributeNames(): Returns an empty Enumeration if no attributes are available
PortletContext;Api Render;getInitParameter1;TRUE;Method getInitParameter(String): Returns a java.lang.String PortletContext initialization parameter value for the specified name
PortletContext;Api Render;getInitParameter2;TRUE;Method getInitParameter(String): Returns null if there is no inittialization parameter for the specified name
PortletContext;Api Render;getInitParameter3;TRUE;Method getInitParameter(String): Throws IllegalArgumentException if the name is null
PortletContext;Api Render;getInitParameterNames1;TRUE;Method getInitParameterNames(): Returns an java.util.Enumeration<java.lang.String> containing the InitParameter names in the PortletContext
PortletContext;Api Render;getInitParameterNames2;TRUE;Method getInitParameterNames(): Returns an empty Enumeration if no InitParameters are available
PortletContext;Api Render;logA;TRUE;Method log(String): Writes specified message to a portlet log file
PortletContext;Api Render;logB;TRUE;Method log(String, Throwable): Writes specified message and stack trace to a portlet log file
PortletContext;Api Render;removeAttribute1;TRUE;Method removeAttribute(String): Removes the attribute with the specified nale
PortletContext;Api Render;removeAttribute2;TRUE;Method removeAttribute(String): Throws IllegalArgumentException if the name is null
PortletContext;Api Render;setAttribute1;TRUE;Method setAttribute(String, Object): Sets an attribute for the specified name in the portlet context
PortletContext;Api Render;setAttribute2;TRUE;Method setAttribute(String, Object): Any existing attribute for the specified name is removed
PortletContext;Api Render;setAttribute3;TRUE;Method setAttribute(String, Object): If the specified name is null, the attribute is removed
PortletContext;Api Render;setAttribute4;TRUE;Method setAttribute(String, Object): Throws IllegalArgumentException if the name is null
PortletContext;Api Render;getPortletContextName1;TRUE;Method getPortletContextName(): Returns the portlet application name
PortletContext;Api Render;getPortletContextName2;TRUE;Method getPortletContextName(): The name is as specified in web.xml the <display-name> element
PortletContext;Api Render;getPortletContextName3;TRUE;Method getPortletContextName(): Returns null if no web.xml <display-name> element is defined
PortletContext;Api Render;getContainerRuntimeOptions1;TRUE;Method getContainerRuntimeOptions(): Returns an java.util.Enumeration<java.lang.String> containing the available runtime option names
PortletContext;Api Render;getContainerRuntimeOptions2;TRUE;Method getContainerRuntimeOptions(): Returns an empty Enumeration if no runtime options are available
PortletPreferences;Api Render;isReadOnly1;TRUE;Method isReadOnly(String): Returns true if the preference specified by the key is defined to be read-only in the deployment descriptor
PortletPreferences;Api Render;isReadOnly2;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is not defined to be read-only in the deployment descriptor
PortletPreferences;Api Render;isReadOnly3;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is undefined
PortletPreferences;Api Render;isReadOnly4;TRUE;Method isReadOnly(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Render;getValue1;TRUE;Method getValue(String, String): Returns the first String value for the specified key
PortletPreferences;Api Render;getValue2;TRUE;Method getValue(String, String): Returns the specified default value if there is no value for the specified key 
PortletPreferences;Api Render;getValue3;TRUE;Method getValue(String, String): Returns the specified default value if the existing value for the specified key is null 
PortletPreferences;Api Render;getValue4;TRUE;Method getValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Render;getValues1;TRUE;Method getValues(String, String[]): Returns the values String[] for the specified key
PortletPreferences;Api Render;getValues2;TRUE;Method getValues(String, String[]): Returns the specified default String[] if there is no Values for the specified key 
PortletPreferences;Api Render;getValues3;TRUE;Method getValues(String, String[]): Returns the specified default String[] if the existing String[] for the specified key is null 
PortletPreferences;Api Render;getValues4;TRUE;Method getValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Render;setValue4;TRUE;Method setValue(String, String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Render;getNames1;TRUE;Method getNames(): Returns an java.util.Enumeration<java.lang.String> containing the available preference keys
PortletPreferences;Api Render;getNames2;TRUE;Method getNames(): Returns an empty Enumeration if no preference keys are available
PortletPreferences;Api Render;getMap1;TRUE;Method getMap(): Returns an java.util.Map<java.lang.String> containing the available preferences
PortletPreferences;Api Render;getMap2;TRUE;Method getMap(): Returns an empty Map if no preferences are available
PortletPreferences;Api Render;reset2;TRUE;Method reset(String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Render;store5;TRUE;Method store(): Throws IllegalStateException if store(): is called in the render method  
PortletPreferences;Api Action;isReadOnly1;TRUE;Method isReadOnly(String): Returns true if the preference specified by the key is defined to be read-only in the deployment descriptor
PortletPreferences;Api Action;isReadOnly2;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is not defined to be read-only in the deployment descriptor
PortletPreferences;Api Action;isReadOnly3;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is undefined
PortletPreferences;Api Action;isReadOnly4;TRUE;Method isReadOnly(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Action;getValue1;TRUE;Method getValue(String, String): Returns the first String value for the specified key
PortletPreferences;Api Action;getValue2;TRUE;Method getValue(String, String): Returns the specified default value if there is no value for the specified key 
PortletPreferences;Api Action;getValue3;TRUE;Method getValue(String, String): Returns the specified default value if the existing value for the specified key is null 
PortletPreferences;Api Action;getValue4;TRUE;Method getValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Action;getValues1;TRUE;Method getValues(String, String[]): Returns the values String[] for the specified key
PortletPreferences;Api Action;getValues2;TRUE;Method getValues(String, String[]): Returns the specified default String[] if there is no Values for the specified key 
PortletPreferences;Api Action;getValues3;TRUE;Method getValues(String, String[]): Returns the specified default String[] if the existing String[] for the specified key is null 
PortletPreferences;Api Action;getValues4;TRUE;Method getValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Action;setValue1;TRUE;Method setValue(String, String): Sets the specified value for the specified key
PortletPreferences;Api Action;setValue2;TRUE;Method setValue(String, String): Any existing String or String[] value for the specified key is replaced
PortletPreferences;Api Action;setValue3;TRUE;Method setValue(String, String): The value may be set to null
PortletPreferences;Api Action;setValue4;TRUE;Method setValue(String, String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Action;setValue5;TRUE;Method setValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Action;setValues1;TRUE;Method setValues(String, String[]): Sets the specified value array for the specified key
PortletPreferences;Api Action;setValues2;TRUE;Method setValues(String, String[]): Any existing String or String[] Values for the specified key is replaced
PortletPreferences;Api Action;setValues3;TRUE;Method setValues(String, String[]): The value array may be set to null
PortletPreferences;Api Action;setValues4;TRUE;Method setValues(String, String[]): The value array may contain null members
PortletPreferences;Api Action;setValues5;TRUE;Method setValues(String, String[]): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Action;setValues6;TRUE;Method setValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Action;getNames1;TRUE;Method getNames(): Returns an java.util.Enumeration<java.lang.String> containing the available preference keys
PortletPreferences;Api Action;getNames2;TRUE;Method getNames(): Returns an empty Enumeration if no preference keys are available
PortletPreferences;Api Action;getMap1;TRUE;Method getMap(): Returns an java.util.Map<java.lang.String> containing the available preferences
PortletPreferences;Api Action;getMap2;TRUE;Method getMap(): Returns an empty Map if no preferences are available
PortletPreferences;Api Action;reset1;TRUE;Method reset(String): Removes the value associated with the specified key
PortletPreferences;Api Action;reset2;TRUE;Method reset(String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Action;reset3;TRUE;Method reset(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Action;store1;TRUE;Method store(): Commits changes made to the preferences to the persistent store 
PortletPreferences;Api Action;store2;TRUE;Method store(): If the store(): method is not called, changes made are discarded
PortletPreferences;Api Action;store3;TRUE;Method store(): If a validator is defined, it is called before the actual store is performed
PortletPreferences;Api Action;store4;TRUE;Method store(): If validation fails, the store is not performed
PortletPreferences;Api Action;store5;TRUE;Method store(): Throws IllegalStateException if store(): is called in the render method  
PortletPreferences;Api Action;store6;TRUE;Method store(): Throws ValidatorException if the validation performed by the associated validator fails 
PortletPreferences;Api Action;store7;FALSE;Method store(): Throws IOException if an I/O error occurs
PreferencesValidator;Api Action;canBeConfigured;TRUE;A PreferencesValidator can be configured in the deployment descriptor
PreferencesValidator;Api Action;validate1;TRUE;Method validate(PortletPreferences): The validate(PortletPreferences): method is called when the preferences are stored 
PreferencesValidator;Api Action;validate2;TRUE;Method validate(PortletPreferences): If a ValidatorException is thrown, the preferences are not stored
PortletPreferences;Api Event;isReadOnly1;TRUE;Method isReadOnly(String): Returns true if the preference specified by the key is defined to be read-only in the deployment descriptor
PortletPreferences;Api Event;isReadOnly2;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is not defined to be read-only in the deployment descriptor
PortletPreferences;Api Event;isReadOnly3;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is undefined
PortletPreferences;Api Event;isReadOnly4;TRUE;Method isReadOnly(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Event;getValue1;TRUE;Method getValue(String, String): Returns the first String value for the specified key
PortletPreferences;Api Event;getValue2;TRUE;Method getValue(String, String): Returns the specified default value if there is no value for the specified key 
PortletPreferences;Api Event;getValue3;TRUE;Method getValue(String, String): Returns the specified default value if the existing value for the specified key is null 
PortletPreferences;Api Event;getValue4;TRUE;Method getValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Event;getValues1;TRUE;Method getValues(String, String[]): Returns the values String[] for the specified key
PortletPreferences;Api Event;getValues2;TRUE;Method getValues(String, String[]): Returns the specified default String[] if there is no Values for the specified key 
PortletPreferences;Api Event;getValues3;TRUE;Method getValues(String, String[]): Returns the specified default String[] if the existing String[] for the specified key is null 
PortletPreferences;Api Event;getValues4;TRUE;Method getValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Event;setValue1;TRUE;Method setValue(String, String): Sets the specified value for the specified key
PortletPreferences;Api Event;setValue2;TRUE;Method setValue(String, String): Any existing String or String[] value for the specified key is replaced
PortletPreferences;Api Event;setValue3;TRUE;Method setValue(String, String): The value may be set to null
PortletPreferences;Api Event;setValue4;TRUE;Method setValue(String, String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Event;setValue5;TRUE;Method setValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Event;setValues1;TRUE;Method setValues(String, String[]): Sets the specified value array for the specified key
PortletPreferences;Api Event;setValues2;TRUE;Method setValues(String, String[]): Any existing String or String[] Values for the specified key is replaced
PortletPreferences;Api Event;setValues3;TRUE;Method setValues(String, String[]): The value array may be set to null
PortletPreferences;Api Event;setValues4;TRUE;Method setValues(String, String[]): The value array may contain null members
PortletPreferences;Api Event;setValues5;TRUE;Method setValues(String, String[]): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Event;setValues6;TRUE;Method setValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Event;getNames1;TRUE;Method getNames(): Returns an java.util.Enumeration<java.lang.String> containing the available preference keys
PortletPreferences;Api Event;getNames2;TRUE;Method getNames(): Returns an empty Enumeration if no preference keys are available
PortletPreferences;Api Event;getMap1;TRUE;Method getMap(): Returns an java.util.Map<java.lang.String> containing the available preferences
PortletPreferences;Api Event;getMap2;TRUE;Method getMap(): Returns an empty Map if no preferences are available
PortletPreferences;Api Event;reset1;TRUE;Method reset(String): Removes the value associated with the specified key
PortletPreferences;Api Event;reset2;TRUE;Method reset(String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Event;reset3;TRUE;Method reset(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Event;store1;TRUE;Method store(): Commits changes made to the preferences to the persistent store 
PortletPreferences;Api Event;store2;TRUE;Method store(): If the store(): method is not called, changes made are discarded
PortletPreferences;Api Event;store3;TRUE;Method store(): If a validator is defined, it is called before the actual store is performed
PortletPreferences;Api Event;store4;TRUE;Method store(): If validation fails, the store is not performed
PortletPreferences;Api Event;store5;TRUE;Method store(): Throws IllegalStateException if store(): is called in the render method  
PortletPreferences;Api Event;store6;TRUE;Method store(): Throws ValidatorException if the validation performed by the associated validator fails 
PortletPreferences;Api Event;store7;FALSE;Method store(): Throws IOException if an I/O error occurs
PreferencesValidator;Api Event;canBeConfigured;TRUE;A PreferencesValidator can be configured in the deployment descriptor
PreferencesValidator;Api Event;validate1;TRUE;Method validate(PortletPreferences): The validate(PortletPreferences): method is called when the preferences are stored 
PreferencesValidator;Api Event;validate2;TRUE;Method validate(PortletPreferences): If a ValidatorException is thrown, the preferences are not stored
PortletPreferences;Api Resource;isReadOnly1;TRUE;Method isReadOnly(String): Returns true if the preference specified by the key is defined to be read-only in the deployment descriptor
PortletPreferences;Api Resource;isReadOnly2;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is not defined to be read-only in the deployment descriptor
PortletPreferences;Api Resource;isReadOnly3;TRUE;Method isReadOnly(String): Returns false if the preference specified by the key is undefined
PortletPreferences;Api Resource;isReadOnly4;TRUE;Method isReadOnly(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Resource;getValue1;TRUE;Method getValue(String, String): Returns the first String value for the specified key
PortletPreferences;Api Resource;getValue2;TRUE;Method getValue(String, String): Returns the specified default value if there is no value for the specified key 
PortletPreferences;Api Resource;getValue3;TRUE;Method getValue(String, String): Returns the specified default value if the existing value for the specified key is null 
PortletPreferences;Api Resource;getValue4;TRUE;Method getValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Resource;getValues1;TRUE;Method getValues(String, String[]): Returns the values String[] for the specified key
PortletPreferences;Api Resource;getValues2;TRUE;Method getValues(String, String[]): Returns the specified default String[] if there is no Values for the specified key 
PortletPreferences;Api Resource;getValues3;TRUE;Method getValues(String, String[]): Returns the specified default String[] if the existing String[] for the specified key is null 
PortletPreferences;Api Resource;getValues4;TRUE;Method getValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Resource;setValue1;TRUE;Method setValue(String, String): Sets the specified value for the specified key
PortletPreferences;Api Resource;setValue2;TRUE;Method setValue(String, String): Any existing String or String[] value for the specified key is replaced
PortletPreferences;Api Resource;setValue3;TRUE;Method setValue(String, String): The value may be set to null
PortletPreferences;Api Resource;setValue4;TRUE;Method setValue(String, String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Resource;setValue5;TRUE;Method setValue(String, String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Resource;setValues1;TRUE;Method setValues(String, String[]): Sets the specified value array for the specified key
PortletPreferences;Api Resource;setValues2;TRUE;Method setValues(String, String[]): Any existing String or String[] Values for the specified key is replaced
PortletPreferences;Api Resource;setValues3;TRUE;Method setValues(String, String[]): The value array may be set to null
PortletPreferences;Api Resource;setValues4;TRUE;Method setValues(String, String[]): The value array may contain null members
PortletPreferences;Api Resource;setValues5;TRUE;Method setValues(String, String[]): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Resource;setValues6;TRUE;Method setValues(String, String[]): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Resource;getNames1;TRUE;Method getNames(): Returns an java.util.Enumeration<java.lang.String> containing the available preference keys
PortletPreferences;Api Resource;getNames2;TRUE;Method getNames(): Returns an empty Enumeration if no preference keys are available
PortletPreferences;Api Resource;getMap1;TRUE;Method getMap(): Returns an java.util.Map<java.lang.String> containing the available preferences
PortletPreferences;Api Resource;getMap2;TRUE;Method getMap(): Returns an empty Map if no preferences are available
PortletPreferences;Api Resource;reset1;TRUE;Method reset(String): Removes the value associated with the specified key
PortletPreferences;Api Resource;reset2;TRUE;Method reset(String): Throws ReadOnlyException if the preference cannot be modified for this request
PortletPreferences;Api Resource;reset3;TRUE;Method reset(String): Throws IllegalArgumentException if the key is null
PortletPreferences;Api Resource;store1;TRUE;Method store(): Commits changes made to the preferences to the persistent store 
PortletPreferences;Api Resource;store2;TRUE;Method store(): If the store(): method is not called, changes made are discarded
PortletPreferences;Api Resource;store3;TRUE;Method store(): If a validator is defined, it is called before the actual store is performed
PortletPreferences;Api Resource;store4;TRUE;Method store(): If validation fails, the store is not performed
PortletPreferences;Api Resource;store5;TRUE;Method store(): Throws IllegalStateException if store(): is called in the render method  
PortletPreferences;Api Resource;store6;TRUE;Method store(): Throws ValidatorException if the validation performed by the associated validator fails 
PortletPreferences;Api Resource;store7;FALSE;Method store(): Throws IOException if an I/O error occurs
PreferencesValidator;Api Resource;canBeConfigured;TRUE;A PreferencesValidator can be configured in the deployment descriptor
PreferencesValidator;Api Resource;validate1;TRUE;Method validate(PortletPreferences): The validate(PortletPreferences): method is called when the preferences are stored 
PreferencesValidator;Api Resource;validate2;TRUE;Method validate(PortletPreferences): If a ValidatorException is thrown, the preferences are not stored
PortletRequestDispatcher;Api Render;includeA1;TRUE;Method include(PortletRequest, PortletResponse): Includes the content of a JSP page in the response
PortletRequestDispatcher;Api Render;includeA2;TRUE;Method include(PortletRequest, PortletResponse): Includes the content of a HTML Page in the response
PortletRequestDispatcher;Api Render;includeA3;TRUE;Method include(PortletRequest, PortletResponse): The included servlet cannot change the status code. The attempt is ignored
PortletRequestDispatcher;Api Render;includeA4;TRUE;Method include(PortletRequest, PortletResponse): The included servlet cannot set the headers. The attempt is ignored
PortletRequestDispatcher;Api Render;includeB1;TRUE;Method include(RenderRequest, RenderResponse): Includes the content of a JSP page in the response
PortletRequestDispatcher;Api Render;includeB2;TRUE;Method include(RenderRequest, RenderResponse): Includes the content of a HTML Page in the response
PortletRequestDispatcher;Api Render;includeB3;TRUE;Method include(RenderRequest, RenderResponse): The included servlet cannot change the status code. The attempt is ignored
PortletRequestDispatcher;Api Render;includeB4;TRUE;Method include(RenderRequest, RenderResponse): The included servlet cannot set the headers. The attempt is ignored
PortletRequestDispatcher;Api Render;forward1;TRUE;Method forward(PortletRequest, PortletResponse): Can forward to a JSP page to create the response
PortletRequestDispatcher;Api Render;forward2;TRUE;Method forward(PortletRequest, PortletResponse): Can forward to a HTML Page to create the response
PortletRequestDispatcher;Api Render;forward3;TRUE;Method forward(PortletRequest, PortletResponse): Throws IllegalStateException if the response was already committed
PortletRequestDispatcher;Api Render;forward4;TRUE;Method forward(PortletRequest, PortletResponse): Throws PortletException if the forwarded servlet throws any excpetion other than IOException or a runtime exception 
PortletRequestDispatcher;Api Render;forward5;FALSE;Method forward(PortletRequest, PortletResponse): Throws IOException if an I/O error occurs
PortletSession;Api Render;fieldAPPLICATION_SCOPE;TRUE;Has int field APPLICATION_SCOPE with value of 0x01 
PortletSession;Api Render;fieldPORTLET_SCOPE;TRUE;Has int field PORTLET_SCOPE with value of 0x02 
PortletSession;Api Render;getAttributeA1;TRUE;Method getAttribute(String): Returns a java.lang.Object for the specified attribute name in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeA2;TRUE;Method getAttribute(String): Returns null if no attribute with the specified name exists in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeA3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletSession;Api Render;getAttributeA4;TRUE;Method getAttribute(String): Throws IllegalStateException if the method is called on an invalidated session
PortletSession;Api Render;getAttributeB1;TRUE;Method getAttribute(String): Returns a java.lang.Object for the specified attribute name in the specified scope
PortletSession;Api Render;getAttributeB2;TRUE;Method getAttribute(String): Returns null if no attribute with the specified name exists in the specified scope
PortletSession;Api Render;getAttributeB3;TRUE;Method getAttribute(String): Throws IllegalArgumentException if the name is null
PortletSession;Api Render;getAttributeB4;TRUE;Method getAttribute(String): Throws IllegalStateException if the method is called on an invalidated session
PortletSession;Api Render;getAttributeNamesA1;TRUE;Method getAttributeNames(): Returns a java.util.Enumeration<java.lang.String> of the available attribute names in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeNamesA2;TRUE;Method getAttributeNames(): Returns an empty Enumeration if there are no attributes available in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeNamesB1;TRUE;Method getAttributeNames(int): Returns a java.util.Enumeration<java.lang.String> of the available attribute names in the specified scope
PortletSession;Api Render;getAttributeNamesB2;TRUE;Method getAttributeNames(int): Returns an empty Enumeration if there are no attributes available in the specified scope
PortletSession;Api Render;getCreationTime1;TRUE;Method getCreationTime(): Returns a long containing the time the session was created in milliseconds since 1/1/1970  
PortletSession;Api Render;getCreationTime2;TRUE;Method getCreationTime(): Throws IllegalStateException if this method is called on an invalidated session
PortletSession;Api Render;getId;TRUE;Method getId(): Returns a String containing a unique identifier for the session
PortletSession;Api Render;getLastAccessedTime;TRUE;Method getLastAccessedTime(): Returns a long containing the last time the session was accessed in milliseconds since 1/1/1970
PortletSession;Api Render;getMaxInactiveInterval;TRUE;Method getMaxInactiveInterval(): Returns the maximum time interval, in seconds, for which the portlet container keeps this session open between client accesses
PortletSession;Api Render;invalidate1;TRUE;Method invalidate(): Invalidates this session (all scopes): and unbinds any objects bound to it
PortletSession;Api Render;invalidate2;TRUE;Method invalidate(): The underlying HTTP session is also invalidated
PortletSession;Api Render;isNew1;TRUE;Method isNew(): Returns true if the client has not yet joined the session
PortletSession;Api Render;isNew2;TRUE;Method isNew(): Returns false if the client has joined the session
PortletSession;Api Render;removeAttributeA1;TRUE;Method removeAttribute(String): Removes the attribute specified by the name from the PORTLET_SCOPE
PortletSession;Api Render;removeAttributeA2;TRUE;Method removeAttribute(String): If there is no attribute by the specified name in the the PORTLET_SCOPE, this method does nothing
PortletSession;Api Render;removeAttributeA3;TRUE;Method removeAttribute(String): If an attribute was removed, the HttpSessionAttributeListener.attributeRemoved method is called on all HttpSessionAttributeListeners in the web application
PortletSession;Api Render;removeAttributeA4;TRUE;Method removeAttribute(String): Throws IllegalArgumentException if the name is null
PortletSession;Api Render;removeAttributeB1;TRUE;Method removeAttribute(String, int): Removes the attribute specified by the name from the specified scope
PortletSession;Api Render;removeAttributeB2;TRUE;Method removeAttribute(String, int): If there is no attribute by the specified name in the specified scope, this method does nothing
PortletSession;Api Render;removeAttributeB3;TRUE;Method removeAttribute(String, int): If an attribute was removed, the HttpSessionAttributeListener.attributeRemoved method is called on all HttpSessionAttributeListeners in the web application
PortletSession;Api Render;removeAttributeB4;TRUE;Method removeAttribute(String, int): Throws IllegalArgumentException if the name is null
PortletSession;Api Render;setAttributeA1;TRUE;Method setAttribute(String, Object): Stores an attribute object under the specified name in the PORTLET_SCOPE
PortletSession;Api Render;setAttributeA2;TRUE;Method setAttribute(String, Object): Replaces the attribute by the specified name if the attribute already exists
PortletSession;Api Render;setAttributeA3;TRUE;Method setAttribute(String, Object): Removes the attribute by the specified name if the object is null
PortletSession;Api Render;setAttributeA4;TRUE;Method setAttribute(String, Object): If the attribute object implements HttpSessionBindingListener, its HttpSessionBindingListener.valueBound method is called
PortletSession;Api Render;setAttributeA5;TRUE;Method setAttribute(String, Object): If an existing attribute object implements HttpSessionBindingListener and is replaced, its HttpSessionBindingListener.valueUnbound method is called
PortletSession;Api Render;setAttributeA6;TRUE;Method setAttribute(String, Object): If an attribute was replaced, the HttpSessionAttributeListener.attributeReplaced method is called on all HttpSessionAttributeListeners in the web application
PortletSession;Api Render;setAttributeA7;TRUE;Method setAttribute(String, Object): If a new attribute was added, the HttpSessionAttributeListener.attributeAdded method is called on all HttpSessionAttributeListeners in the web application
PortletSession;Api Render;setAttributeA8;TRUE;Method setAttribute(String, Object): Throws IllegalArgumentException if the name is null
PortletSession;Api Render;setAttributeB1;TRUE;Method setAttribute(String, Object, int): Stores an attribute object under the specified name in the specified scope
PortletSession;Api Render;setAttributeB2;TRUE;Method setAttribute(String, Object, int): Replaces the attribute by the specified name if the attribute already exists
PortletSession;Api Render;setAttributeB3;TRUE;Method setAttribute(String, Object, int): Removes the attribute by the specified name if the object is null
PortletSession;Api Render;setAttributeB4;TRUE;Method setAttribute(String, Object, int): If the attribute object implements HttpSessionBindingListener, its HttpSessionBindingListener.valueBound method is called
PortletSession;Api Render;setAttributeB5;TRUE;Method setAttribute(String, Object, int): If an existing attribute object implements HttpSessionBindingListener and is replaced, its HttpSessionBindingListener.valueUnbound method is called
PortletSession;Api Render;setAttributeB6;TRUE;Method setAttribute(String, Object, int): If an attribute was replaced, the HttpSessionAttributeListener.attributeReplaced method is called on all HttpSessionAttributeListeners in the web application
PortletSession;Api Render;setAttributeB7;TRUE;Method setAttribute(String, Object, int): If a new attribute was added, the HttpSessionAttributeListener.attributeAdded method is called on all HttpSessionAttributeListeners in the web application
PortletSession;Api Render;setAttributeB8;TRUE;Method setAttribute(String, Object, int): Throws IllegalArgumentException if the name is null
PortletSession;Api Render;setMaxInactiveInterval1;TRUE;Method setMaxInactiveInterval(int): Specifies the time in seconds between client requests before the portlet contaner invalidates the session
PortletSession;Api Render;setMaxInactiveInterval2;TRUE;Method setMaxInactiveInterval(int): If the specified time is negative, the session should never timeout
PortletSession;Api Render;getPortletContext;TRUE;Method getPortletContext(): Returns the PortletContext object for this session
PortletSession;Api Render;getAttributeMapA1;TRUE;Method getAttributeMap(): Returns an java.util.Map<java.lang.String,java.lang.Object> object for the attributes available in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeMapA2;TRUE;Method getAttributeMap(): Returns an empty map if no attributes exist in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeMapB1;TRUE;Method getAttributeMap(int): Returns an java.util.Map<java.lang.String,java.lang.Object> object for the attributes available in the PORTLET_SCOPE
PortletSession;Api Render;getAttributeMapB2;TRUE;Method getAttributeMap(int): Returns an empty map if no attributes exist in the PORTLET_SCOPE
PortletSessionUtil;Api Render;decodeAttributeName1;TRUE;Method decodeAttributeName(String): Returns a String containing the decoded name of the attribute if the input name is an encoded name in PORTLET_SCOPE
PortletSessionUtil;Api Render;decodeAttributeName2;TRUE;Method decodeAttributeName(String): Returns a String containing the input name unchanged if the input name is in APPLICATION_SCOPE 
PortletSessionUtil;Api Render;decodeScope1;TRUE;Method decodeScope(String): Returns the decoded attribute scope for the input encoded attribute name
PortletSessionUtil;Api Render;decodeScope2;TRUE;Method decodeScope(String): Returns PortletSession.APPLICATION_SCOPE if the attribute name is in APPLICATION_SCOPE
PortletSessionUtil;Api Render;decodeScope3;TRUE;Method decodeScope(String): Returns PortletSession.PORTLET_SCOPE if the attribute name is in PORTLET_SCOPE

